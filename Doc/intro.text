








               AAnn IInnttrroodduuccttiioonn ttoo tthhee ZZ SShheellll

                        _P_a_u_l _F_a_l_s_t_a_d
                       _p_f_@_z_-_c_o_d_e_._c_o_m
                       _B_a_s _d_e _B_a_k_k_e_r
                      _b_a_s_@_p_h_y_s_._u_v_a_._n_l



IInnttrroodduuccttiioonn

zzsshh  is a shell designed for interactive use, although it is
also a powerful scripting language.  Many of the useful fea-
tures  of  bash,  ksh,  and tcsh were incorporated into zzsshh;
many original features were added.   This  document  details
some of the unique features of zzsshh.  It assumes basic knowl-
edge of the standard UNIX shells; the intent is  to  show  a
reader  already  familiar with one of the other major shells
what makes zzsshh more useful or more powerful.  This  document
is  not  at  all  comprehensive; read the manual entry for a
description of the  shell  that  is  complete  and  concise,
although somewhat overwhelming and devoid of examples.

The text will frequently mention options that you can set to
change the behaviour of zzsshh.  You can set these options with
the command

%% sseettoopptt _o_p_t_i_o_n_n_a_m_e

and unset them again with

%% uunnsseettoopptt _o_p_t_i_o_n_n_a_m_e

Case  is  ignored  in  option  names, as are embedded under-
scores.

FFiilleennaammee GGeenneerraattiioonn

Otherwise known as _g_l_o_b_b_i_n_g, filename  generation  is  quite
extensive in zzsshh.  Of course, it has all the basics:

%% llss
MMaakkeeffiillee   ffiillee..pprroo   ffoooo..oo      mmaaiinn..oo     qq..cc        rruunn223344     ssttuuffff
bbaarr..oo      ffoooo        lliinnkk       mmoorreessttuuffff  rruunn112233     rruunn224400     ssuubb
ffiillee..hh     ffoooo..cc      mmaaiinn..hh     ppiippee       rruunn22       rruunn330033
%% llss **..cc
ffoooo..cc  qq..cc
%% llss **..[[ccoo]]
bbaarr..oo   ffoooo..cc   ffoooo..oo   mmaaiinn..oo  qq..cc
%% llss ffoooo..??
ffoooo..cc  ffoooo..oo









                             -2-


%% llss **..[[^^cc]]
bbaarr..oo   ffiillee..hh  ffoooo..oo   mmaaiinn..hh  mmaaiinn..oo
%% llss **..[[^^oohh]]
ffoooo..cc  qq..cc

Also,  if  the _E_X_T_E_N_D_E_D_G_L_O_B option is set, some new features
are activated.  For example, the  ^^  character  negates  the
pattern following it:

%% sseettoopptt eexxtteennddeeddgglloobb
%% llss --dd ^^**..cc
MMaakkeeffiillee   ffiillee..pprroo   lliinnkk       mmoorreessttuuffff  rruunn22       rruunn330033
bbaarr..oo      ffoooo        mmaaiinn..hh     ppiippee       rruunn223344     ssttuuffff
ffiillee..hh     ffoooo..oo      mmaaiinn..oo     rruunn112233     rruunn224400     ssuubb
%% llss --dd ^^**..**
MMaakkeeffiillee   lliinnkk       ppiippee       rruunn22       rruunn224400     ssttuuffff
ffoooo        mmoorreessttuuffff  rruunn112233     rruunn223344     rruunn330033     ssuubb
%% llss --dd ^^MMaakkeeffiillee
bbaarr..oo      ffoooo        lliinnkk       mmoorreessttuuffff  rruunn112233     rruunn224400     ssuubb
ffiillee..hh     ffoooo..cc      mmaaiinn..hh     ppiippee       rruunn22       rruunn330033
ffiillee..pprroo   ffoooo..oo      mmaaiinn..oo     qq..cc        rruunn223344     ssttuuffff
%% llss --dd **..^^cc
..rrhhoossttss   bbaarr..oo     ffiillee..hh    ffiillee..pprroo  ffoooo..oo     mmaaiinn..hh    mmaaiinn..oo

An expression of the form <<_x-_y>> matches a range of integers:

%% llss rruunn<<220000--330000>>
rruunn223344  rruunn224400
%% llss rruunn<<330000--440000>>
rruunn330033
%% llss rruunn<<--220000>>
rruunn112233  rruunn22
%% llss rruunn<<330000-->>
rruunn330033
%% llss rruunn<<>>
rruunn112233  rruunn22    rruunn223344  rruunn224400  rruunn330033

The _N_U_M_E_R_I_C_G_L_O_B_S_O_R_T option  will  sort  files  with  numbers
according  to  the number.  This will not work with llss as it
resorts its arguments:

%% sseettoopptt nnuummeerriiccgglloobbssoorrtt
%% eecchhoo rruunn<<>>
rruunn22 rruunn112233 rruunn223344 rruunn224400 rruunn330033

Grouping is possible:

%% llss ((ffoooo||bbaarr))..**
bbaarr..oo  ffoooo..cc  ffoooo..oo
%% llss **..((cc||oo||pprroo))
bbaarr..oo     ffiillee..pprroo  ffoooo..cc     ffoooo..oo     mmaaiinn..oo    qq..cc

Also, the string ****// forces a recursive search of  subdirec-
tories:









                             -3-


%% llss --RR
MMaakkeeffiillee   ffiillee..pprroo   ffoooo..oo      mmaaiinn..oo     qq..cc        rruunn223344     ssttuuffff
bbaarr..oo      ffoooo        lliinnkk       mmoorreessttuuffff  rruunn112233     rruunn224400     ssuubb
ffiillee..hh     ffoooo..cc      mmaaiinn..hh     ppiippee       rruunn22       rruunn330033

mmoorreessttuuffff::

ssttuuffff::
ffiillee  xxxxxx   yyyyyy

ssttuuffff//xxxxxx::
ffoooobbaarr

ssttuuffff//yyyyyy::
ffrroobbaarr
%% llss ****//**bbaarr
ssttuuffff//xxxxxx//ffoooobbaarr  ssttuuffff//yyyyyy//ffrroobbaarr
%% llss ****//ff**
ffiillee..hh            ffoooo               ffoooo..oo             ssttuuffff//xxxxxx//ffoooobbaarr
ffiillee..pprroo          ffoooo..cc             ssttuuffff//ffiillee        ssttuuffff//yyyyyy//ffrroobbaarr
%% llss **bbaarr**
bbaarr..oo
%% llss ****//**bbaarr**
bbaarr..oo             ssttuuffff//xxxxxx//ffoooobbaarr  ssttuuffff//yyyyyy//ffrroobbaarr
%% llss ssttuuffff//****//**bbaarr**
ssttuuffff//xxxxxx//ffoooobbaarr  ssttuuffff//yyyyyy//ffrroobbaarr


It  is  possible  to exclude certain files from the patterns
using the ~ character.  A  pattern  of  the  form  **..cc~~bbaarr..cc
lists all files matching **..cc, except for the file bbaarr..cc.

%% llss **..cc
ffoooo..cc    ffoooobb..cc    bbaarr..cc
%% llss **..cc~~bbaarr..cc
ffoooo..cc    ffoooobb..cc
%% llss **..cc~~ff**
bbaarr..cc


One  can  add  a  number  of _q_u_a_l_i_f_i_e_r_s to the end of any of
these patterns, to restrict matches to certain  file  types.
A qualified pattern is of the form

     _p_a_t_t_e_r_n((...))

with single-character qualifiers inside the parentheses.

%% aalliiaass ll==''llss --ddFF''
%% ll **
MMaakkeeffiillee    ffoooo**        mmaaiinn..hh      qq..cc         rruunn224400
bbaarr..oo       ffoooo..cc       mmaaiinn..oo      rruunn112233      rruunn330033
ffiillee..hh      ffoooo..oo       mmoorreessttuuffff//  rruunn22        ssttuuffff//
ffiillee..pprroo    lliinnkk@@       ppiippee        rruunn223344      ssuubb









                             -4-


%% ll **((//))
mmoorreessttuuffff//  ssttuuffff//
%% ll **((@@))
lliinnkk@@
%% ll **((**))
ffoooo**        lliinnkk@@       mmoorreessttuuffff//  ssttuuffff//
%% ll **((xx))
ffoooo**        lliinnkk@@       mmoorreessttuuffff//  ssttuuffff//
%% ll **((XX))
ffoooo**        lliinnkk@@       mmoorreessttuuffff//  ssttuuffff//
%% ll **((RR))
bbaarr..oo       ffoooo**        lliinnkk@@       mmoorreessttuuffff//  rruunn112233      rruunn224400
ffiillee..hh      ffoooo..cc       mmaaiinn..hh      ppiippee        rruunn22        rruunn330033
ffiillee..pprroo    ffoooo..oo       mmaaiinn..oo      qq..cc         rruunn223344      ssttuuffff//

Note  that  **((xx))  and  **((**))  both  match  executables.  **((XX))
matches files executable by  others,  as  opposed  to  **((xx)),
which  matches files executable by the owner.  **((RR)) and **((rr))
match readable  files;  **((WW))  and  **((ww)),  which  checks  for
writable  files.   **((WW))  is  especially  important, since it
checks for world-writable files:

%% ll **((ww))
bbaarr..oo       ffoooo**        lliinnkk@@       mmoorreessttuuffff//  rruunn112233      rruunn224400
ffiillee..hh      ffoooo..cc       mmaaiinn..hh      ppiippee        rruunn22        rruunn330033
ffiillee..pprroo    ffoooo..oo       mmaaiinn..oo      qq..cc         rruunn223344      ssttuuffff//
%% ll **((WW))
lliinnkk@@   rruunn224400
%% ll --ll lliinnkk rruunn224400
llrrwwxxrrwwxxrrwwxx  11 ppffaallssttaadd       1100 MMaayy 2233 1188::1122 lliinnkk -->> //uussrr//bbiinn//
--rrww--rrww--rrww--  11 ppffaallssttaadd        00 MMaayy 2233 1188::1122 rruunn224400

If you want to have all the files of a certain type as  well
as all symbolic links pointing to files of that type, prefix
the qualifier with a --:

%% ll **((--//))
lliinnkk@@       mmoorreessttuuffff//  ssttuuffff//

You can filter out the symbolic links with the ^^ character:

%% ll **((WW^^@@))
rruunn224400
%% ll **((xx))
ffoooo**        lliinnkk@@       mmoorreessttuuffff//  ssttuuffff//
%% ll **((xx^^@@//))
ffoooo**

To find all plain files, you can use ..:

%% ll **((..))
MMaakkeeffiillee  ffiillee..hh    ffoooo**      ffoooo..oo     mmaaiinn..oo    rruunn112233    rruunn223344    rruunn330033
bbaarr..oo     ffiillee..pprroo  ffoooo..cc     mmaaiinn..hh    qq..cc       rruunn22      rruunn224400    ssuubb
%% ll **((^^..))









                             -5-


lliinnkk@@       mmoorreessttuuffff//  ppiippee        ssttuuffff//
%% ll ss**((..))
ssttuuffff//   ssuubb
%% ll **((pp))
ppiippee
%% ll --ll **((pp))
pprrww--rr----rr----  11 ppffaallssttaadd        00 MMaayy 2233 1188::1122 ppiippee

**((UU)) matches all files owned by  you.   To  search  for  all
files not owned by you, use **((^^UU)):

%% ll --ll **((^^UU))
--rrww--------------  11 ssuubbbbaarraaoo       2299 MMaayy 2233 1188::1133 ssuubb

This searches for setuid files:

%% ll --ll **((ss))
--rrwwssrr--xxrr--xx  11 ppffaallssttaadd       1166 MMaayy 2233 1188::1122 ffoooo**

This checks for a certain user's files:

%% ll --ll **((uu[[ssuubbbbaarraaoo]]))
--rrww--------------  11 ssuubbbbaarraaoo       2299 MMaayy 2233 1188::1133 ssuubb


SSttaarrttuupp FFiilleess

There  are  five  startup  files that zzsshh will read commands
from:

$$ZZDDOOTTDDIIRR//..zzsshheennvv
$$ZZDDOOTTDDIIRR//..zzpprrooffiillee
$$ZZDDOOTTDDIIRR//..zzsshhrrcc
$$ZZDDOOTTDDIIRR//..zzllooggiinn
$$ZZDDOOTTDDIIRR//..zzllooggoouutt

If ZZDDOOTTDDIIRR is not set, then the value of HHOOMMEE is used;  this
is the usual case.

..zzsshheennvv  is  sourced on all invocations of the shell, unless
the --ff option is set.  It should contain commands to set the
command  search path, plus other important environment vari-
ables.  ..zzsshheennvv should not  contain  commands  that  produce
output or assume the shell is attached to a tty.

..zzsshhrrcc  is sourced in interactive shells.  It should contain
commands to set up aliases, functions,  options,  key  bind-
ings, etc.

..zzllooggiinn  is sourced in login shells.  It should contain com-
mands that should be executed only in login  shells.   ..zzlloo--
ggoouutt  is sourced when login shells exit.  ..zzpprrooffiillee is simi-
lar to ..zzllooggiinn, except that it  is  sourced  before  ..zzsshhrrcc.
..zzpprrooffiillee  is  meant  as  an  alternative to ..zzllooggiinn for ksh









                             -6-


fans; the two are not intended to be used together, although
this could certainly be done if desired.  ..zzllooggiinn is not the
place for alias definitions, options,  environment  variable
settings,  etc.; as a general rule, it should not change the
shell environment at all.  Rather, it should be used to  set
the  terminal  type  and  run  a series of external commands
(ffoorrttuunnee, mmssggss, etc).

SShheellll FFuunnccttiioonnss

zzsshh also allows you to create your own commands by  defining
shell functions.  For example:

%% yypp (()) {{
>>       yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
>> }}
%% yypp ppffaallssttaadd
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh

This  function looks up a user in the NIS password map.  The
$$11 expands to the first argument to yypp.  The function  could
have been equivalently defined in one of the following ways:

%% ffuunnccttiioonn yypp {{
>>       yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
>> }}
%% ffuunnccttiioonn yypp (()) {{
>>       yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
>> }}
%% ffuunnccttiioonn yypp (()) yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee

Note that aliases are expanded when the function  definition
is parsed, not when the function is executed.  For example:

%% aalliiaass yyppmmaattcchh==eecchhoo
%% yypp ppffaallssttaadd
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh

Since  the  alias was defined after the function was parsed,
it has no effect on the function's execution.   However,  if
we define the function again with the alias in place:

%% ffuunnccttiioonn yypp (()) {{ yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee }}
%% yypp ppffaallssttaadd
ppffaallssttaadd ppaasssswwdd..bbyynnaammee

it is parsed with the new alias definition in place.  There-
fore, in general you must define aliases before functions.

We can make the function take multiple arguments:

%% uunnaalliiaass yyppmmaattcchh
%% yypp (()) {{
>>       ffoorr ii









                             -7-


>>       ddoo yyppmmaattcchh $$ii ppaasssswwdd..bbyynnaammee
>>       ddoonnee
>> }}
%% yypp ppffaallssttaadd ssuubbbbaarraaoo ssuukktthhnnkkrr
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh
ssuubbbbaarraaoo::**::33333388::3355::KKaarrttiikk SSuubbbbaarraaoo:://uu//ssuubbbbaarraaoo:://uussrr//pprriinncceettoonn//bbiinn//zzsshh
ssuukktthhnnkkrr::**::11226677::3355::RRaahhuull SSuukktthhaannkkaarr:://uu//ssuukktthhnnkkrr:://uussrr//pprriinncceettoonn//bbiinn//ttccsshh

The ffoorr ii loops through each of  the  function's  arguments,
setting  ii  equal to each of them in turn.  We can also make
the function do  something  sensible  if  no  arguments  are
given:

%% yypp (()) {{
>>       iiff (((( $$## ==== 00 ))))
>>       tthheenn eecchhoo uussaaggee:: yypp nnaammee ......;; ffii
>>       ffoorr ii;; ddoo yyppmmaattcchh $$ii ppaasssswwdd..bbyynnaammee;; ddoonnee
>> }}
%% yypp
uussaaggee:: yypp nnaammee ......
%% yypp ppffaallssttaadd ssuukktthhnnkkrr
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh
ssuukktthhnnkkrr::**::11226677::3355::RRaahhuull SSuukktthhaannkkaarr:://uu//ssuukktthhnnkkrr:://uussrr//pprriinncceettoonn//bbiinn//ttccsshh

$$##  is the number of arguments supplied to the function.  If
it is equal to zero, we print a usage message; otherwise, we
loop through the arguments, and yyppmmaattcchh all of them.

Here's a function that selects a random line from a file:

%% rraannddlliinnee (()) {{
>>       iinntteeggeerr zz==$$((wwcc --ll <<$$11))
>>       sseedd --nn $$[[RRAANNDDOOMM %% zz ++ 11]]pp $$11
>> }}
%% rraannddlliinnee //eettcc//mmoottdd
PPHHOOEENNIIXX WWIILLLL BBEE DDOOWWNN bbrriieeffllyy FFrriiddaayy mmoorrnniinngg,, 55//2244//9911 ffrroomm 88 AAMM ttoo
%% rraannddlliinnee //eettcc//mmoottdd
SSuunnOOSS RReelleeaassee 44..11..11 ((PPHHOOEENNIIXX)) ##1199:: TTuuee MMaayy 1144 1199::0033::1155 EEDDTT 11999911
%% rraannddlliinnee //eettcc//mmoottdd
|| PPlleeaassee uussee tthhee ""mmssggss"" ccoommmmaanndd ttoo rreeaadd aannnnoouunncceemmeennttss..  RReeffeerr ttoo tthhee   ||
%% eecchhoo $$zz

%%

rraannddlliinnee  has  a local variable, zz, that holds the number of
lines in the file.  $$[[RRAANNDDOOMM %% zz ++ 11]] expands  to  a  random
number  between  1  and zz.  An expression of the form $$[[...]]
expands to the value of the arithmetic expression within the
brackets,  and  the  RRAANNDDOOMM variable returns a random number
each time it is referenced.  %% is the modulus  operator,  as
in  C.  Therefore, sseedd --nn $$[[RRAANNDDOOMM%%zz++11]]pp picks a random line
from its input, from 1 to zz.











                             -8-


Function  definitions  can  be  viewed  with  the  ffuunnccttiioonnss
builtin:

%% ffuunnccttiioonnss rraannddlliinnee
rraannddlliinnee (()) {{
        iinntteeggeerr zz==$$((wwcc --ll <<$$11))
        sseedd --nn $$[[RRAANNDDOOMM %% zz ++ 11]]pp $$11

}}
%% ffuunnccttiioonnss
yypp (()) {{
        iiff lleett $$## ==== 00

        tthheenn
                eecchhoo uussaaggee:: yypp nnaammee ......

        ffii
        ffoorr ii
        ddoo
                yyppmmaattcchh $$ii ppaasssswwdd..bbyynnaammee

                ddoonnee

}}
rraannddlliinnee (()) {{
        iinntteeggeerr zz==$$((wwcc --ll <<$$11))
        sseedd --nn $$[[RRAANNDDOOMM %% zz ++ 11]]pp $$11

}}

Here's another one:

%% ccxx (()) {{ cchhmmoodd ++xx $$** }}
%% llss --ll ffoooo bbaarr
--rrww--rr----rr----  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 bbaarr
--rrww--rr----rr----  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 ffoooo
%% ccxx ffoooo bbaarr
%% llss --ll ffoooo bbaarr
--rrwwxxrr--xxrr--xx  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 bbaarr
--rrwwxxrr--xxrr--xx  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 ffoooo

Note that this could also have been implemented as an alias:

%% cchhmmoodd 664444 ffoooo bbaarr
%% aalliiaass ccxx==''cchhmmoodd ++xx''
%% ccxx ffoooo bbaarr
%% llss --ll ffoooo bbaarr
--rrwwxxrr--xxrr--xx  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 bbaarr
--rrwwxxrr--xxrr--xx  11 ppffaallssttaadd       2299 MMaayy 2244 0044::3388 ffoooo


Instead of defining a lot of functions in your  ..zzsshhrrcc,  all
of  which  you  may  not  use, it is often better to use the
aauuttoollooaadd builtin.  The idea is, you create a directory where









                             -9-


function  definitions  are stored, declare the names in your
..zzsshhrrcc, and tell the shell where to look for them.  Whenever
you  reference a function, the shell will automatically load
it into memory.

%% mmkkddiirr //ttmmpp//ffuunnss
%% ccaatt >>//ttmmpp//ffuunnss//yypp
yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
^^DD
%% ccaatt >>//ttmmpp//ffuunnss//ccxx
cchhmmoodd ++xx $$**
^^DD
%% FFPPAATTHH==//ttmmpp//ffuunnss
%% aauuttoollooaadd ccxx yypp
%% ffuunnccttiioonnss ccxx yypp
uunnddeeffiinneedd ccxx (())
uunnddeeffiinneedd yypp (())
%% cchhmmoodd 775555 //ttmmpp//ffuunnss//{{ccxx,,yypp}}
%% yypp eeggssiirreerr
eeggssiirreerr::**::33221144::3355::EEmmiinn GGuunn SSiirreerr:://uu//eeggssiirreerr:://bbiinn//sshh
%% ffuunnccttiioonnss yypp
yypp (()) {{
        yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
}}

This idea has other benefits.  By adding a ##!! header to  the
files, you can make them double as shell scripts.  (Although
it is faster to use them as functions, since a separate pro-
cess is not created.)

%% eedd //ttmmpp//ffuunnss//yypp
2255
ii
##!! //uussrr//llooccaall//bbiinn//zzsshh
ww
4422
qq
%% <<//ttmmpp//ffuunnss//yypp
##!! //uussrr//llooccaall//bbiinn//zzsshh
yyppmmaattcchh $$11 ppaasssswwdd..bbyynnaammee
%% //ttmmpp//ffuunnss//yypp ssuukktthhnnkkrr
ssuukktthhnnkkrr::**::11226677::3355::RRaahhuull SSuukktthhaannkkaarr:://uu//ssuukktthhnnkkrr:://uussrr//pprriinncceettoonn//bbiinn//ttccsshh

Now  other people, who may not use zzsshh, or who don't want to
copy all of your ..zzsshhrrcc, may use these  functions  as  shell
scripts.

DDiirreeccttoorriieess

One  nice  feature  of zzsshh is the way it prints directories.
For example, if we set the prompt like this:

pphhooeenniixx%% PPRROOMMPPTT==''%%~~>> ''
~~>> ccdd ssrrcc









                            -10-


~~//ssrrcc>>

the shell will print the current directory  in  the  prompt,
using  the  ~~  character.  However, zzsshh is smarter than most
other shells in this respect:

~~//ssrrcc>> ccdd ~~ssuubbbbaarraaoo
~~ssuubbbbaarraaoo>> ccdd ~~mmaarruucchhcckk
~~mmaarruucchhcckk>> ccdd lliibb
~~mmaarruucchhcckk//lliibb>> ccdd ffuunn
~~mmaarruucchhcckk//lliibb//ffuunn>> ffoooo==//uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc
~~mmaarruucchhcckk//lliibb//ffuunn>> ccdd ~~ffoooo
~~ffoooo>> ccdd ....
//uussrr//pprriinncceettoonn//ccoommmmoonn>> ccdd ssrrcc
~~ffoooo>> ccdd nneewwss//nnnnttpp
~~ffoooo//nneewwss//nnnnttpp>> ccdd iinneewwss
~~ffoooo//nneewwss//nnnnttpp//iinneewwss>>

Note that zzsshh prints _o_t_h_e_r users' directories  in  the  form
~~uusseerr.  Also note that you can set a parameter and use it as
a directory name; zzsshh will act as if ffoooo is a user with  the
login  directory  //uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc.  This is conve-
nient, especially if you're  sick  of  seeing  prompts  like
this:

pphhooeenniixx:://uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc//XX..VV1111RR44//ccoonnttrriibb//cclliieennttss//xxvv//ddooccss>>

If  you get stuck in this position, you can give the current
directory a short name, like this:

//uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc//nneewwss//nnnnttpp//iinneewwss>> iinneewwss==$$PPWWDD
//uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc//nneewwss//nnnnttpp//iinneewwss>> eecchhoo ~~iinneewwss
//uussrr//pprriinncceettoonn//ccoommmmoonn//ssrrcc//nneewwss//nnnnttpp//iinneewwss
~~iinneewwss>>

When you reference a directory in the form ~~iinneewwss, the shell
assumes  that you want the directory displayed in this form;
thus simply typing eecchhoo  ~~iinneewwss  or  ccdd  ~~iinneewwss  causes  the
prompt to be shortened.  You can define a shell function for
this purpose:

~~iinneewwss>> nnaammeeddiirr (()) {{ $$11==$$PPWWDD ;;  :: ~~$$11 }}
~~iinneewwss>> ccdd //uussrr//pprriinncceettoonn//bbiinn
//uussrr//pprriinncceettoonn//bbiinn>> nnaammeeddiirr ppbbiinn
~~ppbbiinn>> ccdd //vvaarr//ssppooooll//mmaaiill
//vvaarr//ssppooooll//mmaaiill>> nnaammeeddiirr ssppooooll
~~ssppooooll>> ccdd ..mmssggss
~~ssppooooll//..mmssggss>>

You may want to add this one-line function to your ..zzsshhrrcc.

zzsshh can also put the current directory in your title bar, if
you  are  using  a  windowing system.  One way to do this is
with the cchhppwwdd function, which is automatically executed  by









                            -11-


the  shell  whenever you change directory.  If you are using
xterm, this will work:

cchhppwwdd (()) {{ pprriinntt --PPnn ''^^[[]]22;;%%~~^^GG'' }}

The --PP option tells pprriinntt to  treat  its  arguments  like  a
prompt  string; otherwise the %%~~ would not be expanded.  The
--nn option suppresses the terminating newline, as with  eecchhoo.

If you are using an IRIS wwsshh, do this:

cchhppwwdd (()) {{ pprriinntt --PPnn ''\\22220011..yy%%~~\\223344'' }}

The  pprriinntt --DD command has other uses.  For example, to print
the current directory to standard output in short form,  you
can do this:

%% pprriinntt --DD $$PPWWDD
~~ssuubbbbaarraaoo//ssrrcc

and to print each component of the path in short form:

%% pprriinntt --DD $$ppaatthh
//bbiinn //uussrr//bbiinn ~~llooccbbiinn ~~llooccbbiinn//XX1111 ~~//bbiinn


DDiirreeccttoorryy SSttaacckkss

If  you  use  csh, you may know about directory stacks.  The
ppuusshhdd command puts the current directory on the  stack,  and
changes  to  a new directory; the ppooppdd command pops a direc-
tory off the stack and changes to it.

pphhooeenniixx%% ccdd
pphhooeenniixx%% PPRROOMMPPTT==''ZZ %%~~>> ''
ZZ ~~>> ppuusshhdd //ttmmpp
//ttmmpp ~~
ZZ //ttmmpp>> ppuusshhdd //uussrr//eettcc
//uussrr//eettcc //ttmmpp ~~
ZZ //uussrr//eettcc>> ppuusshhdd //uussrr//bbiinn
//uussrr//bbiinn //uussrr//eettcc //ttmmpp ~~
ZZ //uussrr//bbiinn>> ppooppdd
//uussrr//eettcc //ttmmpp ~~
ZZ //uussrr//eettcc>> ppooppdd
//ttmmpp ~~
ZZ //ttmmpp>> ppuusshhdd //eettcc
//eettcc //ttmmpp ~~
ZZ //eettcc>> ppooppdd
//ttmmpp ~~

zzsshh's directory stack commands work similarly.  One  differ-
ence  is the way ppuusshhdd is handled if no arguments are given.
As in csh, this exchanges the top two elements of the direc-
tory stack:









                            -12-


ZZ //ttmmpp>> ddiirrss
//ttmmpp ~~
ZZ //ttmmpp>> ppuusshhdd
~~ //ttmmpp

unless the stack only has one entry:

ZZ ~~>> ppooppdd
//ttmmpp
ZZ //ttmmpp>> ddiirrss
//ttmmpp
ZZ //ttmmpp>> ppuusshhdd
~~ //ttmmpp
ZZ ~~>>

or unless the _P_U_S_H_D_T_O_H_O_M_E option is set:

ZZ ~~>> sseettoopptt ppuusshhddttoohhoommee
ZZ ~~>> ppuusshhdd
~~ ~~ //ttmmpp


As  an alternative to using directory stacks in this manner,
we can get something like a _d_i_r_e_c_t_o_r_y _h_i_s_t_o_r_y by  setting  a
few more options and parameters:

~~>> DDIIRRSSTTAACCKKSSIIZZEE==88
~~>> sseettoopptt aauuttooppuusshhdd ppuusshhddmmiinnuuss ppuusshhddssiilleenntt ppuusshhddttoohhoommee
~~>> aalliiaass ddhh==''ddiirrss --vv''
~~>> ccdd //ttmmpp
//ttmmpp>> ccdd //uussrr
//uussrr>> ccdd bbiinn
//uussrr//bbiinn>> ccdd ....//ppuubb
//uussrr//ppuubb>> ddhh
00       //uussrr//ppuubb
11       //uussrr//bbiinn
22       //uussrr
33       //ttmmpp
44       ~~
//uussrr//ppuubb>> ccdd --33
//ttmmpp>> ddhh
00       //ttmmpp
11       //uussrr//ppuubb
22       //uussrr//bbiinn
33       //uussrr
44       ~~
//ttmmpp>> llss ==22//ddff
//uussrr//bbiinn//ddff
//ttmmpp>> ccdd --44
~~>>

Note that ==22 expanded to the second directory in the history
list, and that ccdd --33 recalled the  third  directory  in  the
list.









                            -13-


You  may  be wondering what all those options do.  _A_U_T_O_P_U_S_H_D
made ccdd act like ppuusshhdd.  (aalliiaass ccdd==ppuusshhdd is not  sufficient,
for  various reasons.)  _P_U_S_H_D_M_I_N_U_S swapped the meaning of ccdd
++11 and ccdd --11; we want them to mean the opposite of what they
mean in csh, because it makes more sense in this scheme, and
it's easier to type:

~~>> ddhh
00       ~~
11       //ttmmpp
22       //uussrr//ppuubb
33       //uussrr//bbiinn
44       //uussrr
~~>> uunnsseettoopptt ppuusshhddmmiinnuuss
~~>> ccdd ++11
//ttmmpp>> ddhh
00       //ttmmpp
11       ~~
22       //uussrr//ppuubb
33       //uussrr//bbiinn
44       //uussrr
//ttmmpp>> ccdd ++22
//uussrr//ppuubb>>

_P_U_S_H_D_S_I_L_E_N_T keeps the  shell  from  printing  the  directory
stack  each  time  we  do a ccdd, and _P_U_S_H_D_T_O_H_O_M_E we mentioned
earlier:

//uussrr//ppuubb>> uunnsseettoopptt ppuusshhddssiilleenntt
//uussrr//ppuubb>> ccdd //eettcc
//eettcc //uussrr//ppuubb //ttmmpp ~~ //uussrr//bbiinn //uussrr
//eettcc>> ccdd
~~ //eettcc //uussrr//ppuubb //ttmmpp ~~ //uussrr//bbiinn //uussrr
~~>> uunnsseettoopptt ppuusshhddttoohhoommee
~~>> ccdd
//eettcc ~~ //uussrr//ppuubb //ttmmpp ~~ //uussrr//bbiinn //uussrr
//eettcc>>

DDIIRRSSTTAACCKKSSIIZZEE keeps the  directory  stack  from  getting  too
large, much like _H_I_S_T_S_I_Z_E:

//eettcc>> sseettoopptt ppuusshhddssiilleenntt
//eettcc>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ccdd //
//>> ddhh
00       //
11       //
22       //









                            -14-


33       //
44       //
55       //
66       //
77       //


CCoommmmaanndd//PPrroocceessss SSuubbssttiittuuttiioonn

Command substitution in zzsshh can take two forms.  In the tra-
ditional form, a command enclosed in backquotes  (``...``)  is
replaced  on  the command line with its output.  This is the
form used by the older shells.  Newer shells (like zzsshh) also
provide  another  form, $$((...)).  This form is much easier to
nest.

%% llss --ll ``eecchhoo //vvmmuunniixx``
--rrwwxxrr--xxrr--xx  11 rroooott      11220099770022 MMaayy 1144 1199::0044 //vvmmuunniixx
%% llss --ll $$((eecchhoo //vvmmuunniixx))
--rrwwxxrr--xxrr--xx  11 rroooott      11220099770022 MMaayy 1144 1199::0044 //vvmmuunniixx
%% wwhhoo || ggrreepp mmaadd
ssuubbbbaarraaoo ttttyytt77   MMaayy 2233 1155::0022   ((mmaadd5555ssxx1155..PPrriinnccee))
ppffaallssttaadd ttttyyuu11   MMaayy 2233 1166::2255   ((mmaadd5555ssxx1144..PPrriinnccee))
ssuubbbbaarraaoo ttttyyuu66   MMaayy 2233 1155::0044   ((mmaadd5555ssxx1155..PPrriinnccee))
ppffaallssttaadd ttttyyvv33   MMaayy 2233 1166::2255   ((mmaadd5555ssxx1144..PPrriinnccee))
%% wwhhoo || ggrreepp mmaadd || aawwkk ''{{pprriinntt $$22}}''
ttttyytt77
ttttyyuu11
ttttyyuu66
ttttyyvv33
%% ccdd //ddeevv;; llss --ll $$((wwhhoo ||
>> ggrreepp $$((eecchhoo mmaadd)) ||
>> aawwkk ''{{ pprriinntt $$22 }}''))
ccrrwwxx--ww--------  11 ssuubbbbaarraaoo  2200,,  7711 MMaayy 2233 1188::3355 ttttyytt77
ccrrww----ww--------  11 ppffaallssttaadd  2200,,  8811 MMaayy 2233 1188::4422 ttttyyuu11
ccrrwwxx--ww--------  11 ssuubbbbaarraaoo  2200,,  8866 MMaayy 2233 1188::3388 ttttyyuu66
ccrrww----ww--------  11 ppffaallssttaadd  2200,,  9999 MMaayy 2233 1188::4411 ttttyyvv33

Many common  uses  of  command  substitution,  however,  are
superseded by other mechanisms of zzsshh:

%% llss --ll ``ttttyy``
ccrrww--rrww--rrww--  11 rroooott      2200,,  2288 MMaayy 2233 1188::3355 //ddeevv//ttttyyqqcc
%% llss --ll $$TTTTYY
ccrrww--rrww--rrww--  11 rroooott      2200,,  2288 MMaayy 2233 1188::3355 //ddeevv//ttttyyqqcc
%% llss --ll ``wwhhiicchh rrnn``
--rrwwxxrr--xxrr--xx  11 rroooott       117722003322 MMaarr  66 1188::4400 //uussrr//pprriinncceettoonn//bbiinn//rrnn
%% llss --ll ==rrnn
--rrwwxxrr--xxrr--xx  11 rroooott       117722003322 MMaarr  66 1188::4400 //uussrr//pprriinncceettoonn//bbiinn//rrnn

A  command name with a == prepended is replaced with its full
pathname.  This can be very convenient.  If it's not  conve-
nient for you, you can turn it off:










                            -15-


%% llss
==ffoooo    ==bbaarr
%% llss ==ffoooo ==bbaarr
zzsshh:: ffoooo nnoott ffoouunndd
%% sseettoopptt nnooeeqquuaallss
%% llss ==ffoooo ==bbaarr
==ffoooo    ==bbaarr


Another nice feature is process substitution:

%% wwhhoo || ffggrreepp --ff ==((pprriinntt --ll rroooott lleemmkkee sshhggcchhaann ssuubbbbaarraaoo))
rroooott     ccoonnssoollee MMaayy 1199 1100::4411
lleemmkkee    ttttyyqq00   MMaayy 2222 1100::0055   ((nnaarrnniiaa::00..00))
lleemmkkee    ttttyyrr77   MMaayy 2222 1100::0055   ((nnaarrnniiaa::00..00))
lleemmkkee    ttttyyrrdd   MMaayy 2222 1100::0055   ((nnaarrnniiaa::00..00))
sshhggcchhaann  ttttyyss11   MMaayy 2233 1166::5522   ((ggaauuddii..PPrriinncceettoonn..))
ssuubbbbaarraaoo ttttyytt77   MMaayy 2233 1155::0022   ((mmaadd5555ssxx1155..PPrriinnccee))
ssuubbbbaarraaoo ttttyyuu66   MMaayy 2233 1155::0044   ((mmaadd5555ssxx1155..PPrriinnccee))
sshhggcchhaann  ttttyyvvbb   MMaayy 2233 1166::5511   ((ggaauuddii..PPrriinncceettoonn..))

A  command of the form ==((...)) is replaced with the name of a
_f_i_l_e containing its output.  (A command substitution, on the
other  hand,  is replaced with the output itself.)  pprriinntt --ll
is like eecchhoo, excepts that it prints its arguments  one  per
line, the way ffggrreepp expects them:

%% pprriinntt --ll ffoooo bbaarr
ffoooo
bbaarr

We could also have written:

%% wwhhoo || ffggrreepp --ff ==((eecchhoo ''rroooott
>> lleemmkkee
>> sshhggcchhaann
>> ssuubbbbaarraaoo''))

Using  process  substitution,  you  can edit the output of a
command:

%% eedd ==((wwhhoo || ffggrreepp --ff ~~//..ffrriieennddss))
335555
gg//lleemmkkee//dd
ww //ttmmpp//ffiillbbaarr
222266
qq
%% ccaatt //ttmmpp//ffiillbbaarr
rroooott     ccoonnssoollee MMaayy 1199 1100::4411
sshhggcchhaann  ttttyyss11   MMaayy 2233 1166::5522   ((ggaauuddii..PPrriinncceettoonn..))
ssuubbbbaarraaoo ttttyytt77   MMaayy 2233 1155::0022   ((mmaadd5555ssxx1155..PPrriinnccee))
ssuubbbbaarraaoo ttttyyuu66   MMaayy 2233 1155::0044   ((mmaadd5555ssxx1155..PPrriinnccee))
sshhggcchhaann  ttttyyvvbb   MMaayy 2233 1166::5511   ((ggaauuddii..PPrriinncceettoonn..))










                            -16-


or easily read archived mail:

%% mmaaiill --ff ==((zzccaatt ~~//mmaaiill//oollddzzsshhmmaaiill..ZZ))
""//ttmmpp//zzsshhaa0066002244"":: 8844 mmeessssaaggeess,, 00 nneeww,, 4433 uunnrreeaadd
>>  11  UU  TTOO:: ppffaallssttaadd,, zzsshh ((1100))
   22  UU  nnyyttiimm!!ttiimm@@uuuunneett..uuuu..nneett,, RRee:: ZZsshh oonn SSppaarrcc11 //SSuunnOOSS 44..00..33
   33  UU  JJAAMM%%TTPPNN@@uuttrrccggww..uuttcc..ccoomm,, zzsshh ffiixx ((1155))
   44  UU  ddjjmm@@eenngg..uummdd..eedduu,, wwaayy ttoo ffiinndd oouutt iiff rruunnnniinngg zzsshh?? ((2255))
   55  UU  ddjjmm@@eenngg..uummdd..eedduu,, RRee:: wwaayy ttoo ffiinndd oouutt iiff rruunnnniinngg zzsshh?? ((1177))
   66   rr ddjjmm@@eenngg..uummdd..eedduu,, MMeettaa .. ((1188))
   77  UU  jjaacckk@@ccss..ggllaassggooww..aacc..uukk,, RRee:: pprroobblleemm bbuuiillddiinngg zzsshh ((114477))
   88  UU  nnyyttiimm!!ttiimm@@uuuunneett..uuuu..nneett,, RRee:: ZZsshh oonn SSppaarrcc11 //SSuunnOOSS 44..00..33
   99     uurrssaa!!jjmmdd,, AAnnootthheerr ffiixx...... ((6611))
  1100  UU  ppppllaacceewwaa@@bbbbnn..ccoomm,, RRee:: vv1188ii008844:: ZZsshh 22..0000 -- AA ssmmaallll ccoommppllaaiinntt ((3366))
  1111  UU  lluubbkkiinn@@ccss..rroocchheesstteerr..eedduu,, PPOOSSIIXX jjoobb ccoonnttrrooll ((3344))
  1122  UU  yyaallee!!bbrroonnssoonn!!ttaann@@uuuunneett..UUUU..NNEETT
  1133  UU  bbrreetttt@@rrppii..eedduu,, zzsshh ((3366))
  1144  SS  ssuubbbbaarraaoo,, zzsshh ssuucckkss!!!!!!!! ((228866))
  1155  UU  ssnniibbrruu!!dd224411ss000088!!dd224411ss001133!!aallaa@@rreellaayy..EEUU..nneett,, zzsshh ((116655))
  1166  UU  nnyyttiimm!!ttiimm@@uuuunneett..UUUU..NNEETT,, RRee:: ZZsshh oonn SSppaarrcc11 //SSuunnOOSS 44..00..33
  1177  UU  ssuubbbbaarraaoo,, zzsshh iiss aa jjuunnkk sshheellll ((4433))
  1188  UU  aammaarraanntthh@@vveellaa..aaccss..ooaakkllaanndd..eedduu,, zzsshh ((3333))
4433uu//8844 11:: xx
%% llss --ll //ttmmpp//zzsshhaa0066002244
//ttmmpp//zzsshhaa0066002244 nnoott ffoouunndd

Note that the shell creates a temporary file, and deletes it
when the command is finished.

%% ddiiffff ==((llss)) ==((llss --FF))
33cc33
<< ffoorrttuunnee
------
>> ffoorrttuunnee**
1100cc1100
<< ssttrrffiillee
------
>> ssttrrffiillee**

If  you  read zzsshh's man page, you may notice that <<((...))  is
another form of process substitution  which  is  similar  to
==((...)).   There  is an important difference between the two.
In the <<((...)) case, the shell creates a  named  pipe  (FIFO)
instead  of  a file.  This is better, since it does not fill
up the file system; but it does not work in all  cases.   In
fact,  if we had replaced ==((...)) with <<((...)) in the examples
above, all of them would have  stopped  working  except  for
ffggrreepp  --ff  <<((...)).  You can not edit a pipe, or open it as a
mail folder; ffggrreepp, however, has no problem with  reading  a
list  of  words from a pipe.  You may wonder why ddiiffff <<((ffoooo))
bbaarr doesn't work, since ffoooo || ddiiffff  --  bbaarr  works;  this  is
because ddiiffff creates a temporary file if it notices that one
of its arguments is --, and then copies its standard input to
the temporary file.









                            -17-


>>((...))  is  just like <<((...)) except that the command between
the parentheses will get its input from the named pipe.

%% ddvviippss --oo >>((llpprr)) zzsshh..ddvvii


RReeddiirreeccttiioonn

Apart from all the  regular  redirections  like  the  Bourne
shell  has,  zzsshh  can do more.  You can send the output of a
command to more than one file, by specifying  more  redirec-
tions like

%% eecchhoo HHeelllloo WWoorrlldd >>ffiillee11 >>ffiillee22

and  the text will end up in both files.  Similarly, you can
send the output to a file and into a pipe:

%% mmaakkee >> mmaakkee..lloogg || ggrreepp EErrrroorr

The same goes for input.  You can make the input of  a  com-
mand come from more than one file.

%% ssoorrtt <<ffiillee11 <<ffiillee22 <<ffiillee33

The  command  will  first  get  the contents of file1 as its
standard input, then those of file2 and finally the contents
of file3.  This, too, works with pipes.

%% ccuutt --dd:: --ff11 //eettcc//ppaasssswwdd || ssoorrtt <<nneewwnnaammeess

The  sort will get as its standard input first the output of
ccuutt and then the contents of nneewwnnaammeess.

Suppose you would like to watch the  standard  output  of  a
command  on  your  terminal,  but  want to pipe the standard
error to another command.  An easy way to do this in zzsshh  is
by redirecting the standard error using 22>> >>((...)).

%% ffiinndd // --nnaammee ggaammeess 22>> >>((ggrreepp --vv ''PPeerrmmiissssiioonn'' >> rreeaalleerrrroorrss))

The  above  redirection  will actually be implemented with a
regular pipe, not a temporary named pipe.

AAlliiaassiinngg

Often-used commands can be abbreviated with an alias:

%% aalliiaass uucc==uunnccoommpprreessss
%% llss
hhaannooii..ZZ
%% uucc hhaannooii
%% llss
hhaannooii









                            -18-


or commands with certain desired options:

%% aalliiaass ffmm==''ffiinnggeerr --mm''
%% ffmm rroooott
LLooggiinn nnaammee:: rroooott                        IInn rreeaall lliiffee:: OOppeerraattoorr
DDiirreeccttoorryy:: //                            SShheellll:: //bbiinn//ccsshh
OOnn ssiinnccee MMaayy 1199 1100::4411::1155 oonn ccoonnssoollee     33 ddaayyss 55 hhoouurrss IIddllee TTiimmee
NNoo uunnrreeaadd mmaaiill
NNoo PPllaann..

%% aalliiaass lloocckk==''lloocckk --pp --6600000000''
%% lloocckk
lloocckk:: //ddeevv//ttttyyrr44 oonn pphhooeenniixx.. ttiimmeeoouutt iinn 6600000000 mmiinnuutteess
ttiimmee nnooww iiss FFrrii MMaayy 2244 0044::2233::1188 EEDDTT 11999911
KKeeyy::

%% aalliiaass ll==''llss --AAFF''
%% ll //
..bbaasshh__hhiissttoorryy              kkaaddbb**
..bbaasshhrrcc                    lliibb@@
..ccsshhrrcc                     lliicceennsseedd//
..eexxrrcc                      lloosstt++ffoouunndd//
..llooggiinn                     mmaaccssyymmaa
...

Aliases can also be used to replace old commands:

%% aalliiaass ggrreepp==eeggrreepp ppss==ssppss mmaakkee==ggmmaakkee
%% aalliiaass wwhhooaammii==''eecchhoo rroooott''
%% wwhhooaammii
rroooott

or to define new ones:

%% ccdd //
%% aalliiaass sszz==''llss --ll || ssoorrtt --nn ++33 || ttaaiill --1100''
%% sszz
ddrrwwxxrr--ssrr--xx  77 bbiinn          33007722 MMaayy 2233 1111::5599 eettcc
ddrrwwxxrrwwxxrrwwxx 2266 rroooott         55112200 MMaayy 2244 0044::2200 ttmmpp
ddrrwwxxrr--xxrr--xx  22 rroooott         88119922 DDeecc 2266 1199::3344 lloosstt++ffoouunndd
ddrrwwxxrr--ssrr--xx  22 bbiinn         1144884488 MMaayy 2233 1188::4488 ddeevv
--rr----rr----rr----  11 rroooott       114400552200 DDeecc 2266 2200::0088 bboooott
--rrwwxxrr--xxrr--xx  11 rroooott       331111117722 DDeecc 2266 2200::0088 kkaaddbb
--rrwwxxrr--xxrr--xx  11 rroooott      11220099669955 AApprr 1166 1155::3333 vvmmuunniixx..oolldd
--rrwwxxrr--xxrr--xx  11 rroooott      11220099770022 MMaayy 1144 1199::0044 vvmmuunniixx
--rrwwxxrr--xxrr--xx  11 rroooott      11220099775588 MMaayy 2211 1122::2233 vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd
--rrwwxxrr--xxrr--xx  11 rroooott      11771111884488 DDeecc 2266 2200::0088 vvmmuunniixx..oorrgg
%% ccdd
%% aalliiaass rraabbllee==''llss --AAFFttrrdd **((RR))'' nnrraabbllee==''llss --AAFFttrrdd **((^^RR))''
%% rraabbllee
RREEAADDMMEE      ffuunncc//       bbiinn//        ppuubb//        NNeewwss//       ssrrcc//
nniicceeccoolloorrss  eettcc//        ssccrr//        ttmmpp//        iirriiss//       zzsshh**
%% nnrraabbllee
MMaaiillbbooxxeess//  mmaaiill//       nnootteess









                            -19-


(The pattern **((RR)) matches all readable files in the  current
directory, and **((^^RR)) matches all unreadable files.)

Most  other  shells  have  aliases  of  this  kind  (_c_o_m_m_a_n_d
aliases).  However, zzsshh also has _g_l_o_b_a_l aliases,  which  are
substituted  anywhere on a line.  Global aliases can be used
to abbreviate frequently-typed usernames, hostnames, etc.

%% aalliiaass --gg mmee==ppffaallssttaadd gguunn==eeggssiirreerr mmjjmm==mmaarruucchhcckk
%% wwhhoo || ggrreepp mmee
ppffaallssttaadd ttttyypp00   MMaayy 2244 0033::3399   ((mmiicckkeeyy..PPrriinncceettoonn))
ppffaallssttaadd ttttyypp55   MMaayy 2244 0033::4422   ((mmiicckkeeyy..PPrriinncceettoonn))
%% ffmm gguunn
LLooggiinn nnaammee:: eeggssiirreerr                     IInn rreeaall lliiffee:: EEmmiinn GGuunn SSiirreerr
DDiirreeccttoorryy:: //uu//eeggssiirreerr                   SShheellll:: //bbiinn//sshh
LLaasstt llooggiinn TThhuu MMaayy 2233 1199::0055 oonn ttttyyqq33 ffrroomm bbooww..PPrriinncceettoonn..EEDD
NNeeww mmaaiill rreecceeiivveedd FFrrii MMaayy 2244 0022::3300::2288 11999911;;
  uunnrreeaadd ssiinnccee FFrrii MMaayy 2244 0022::3300::2277 11999911
%% aalliiaass --gg pphhxx==pphhooeenniixx..pprriinncceettoonn..eedduu wwaarrcc==wwuuaarrcchhiivvee..wwuussttll..eedduu
%% ffttpp wwaarrcc
CCoonnnneecctteedd ttoo wwuuaarrcchhiivvee..wwuussttll..eedduu..

Here are some more interesting uses.

%% aalliiaass --gg MM==''|| mmoorree'' GGFF==''|| ffggrreepp --ff ~~//..ffrriieennddss''
%% wwhhoo MM   ## _p_i_p_e_s _t_h_e _o_u_t_p_u_t _o_f wwhhoo _t_h_r_o_u_g_h mmoorree
%% wwhhoo GGFF  ## _s_e_e _i_f _y_o_u_r _f_r_i_e_n_d_s _a_r_e _o_n
%% ww GGFF    ## _s_e_e _w_h_a_t _y_o_u_r _f_r_i_e_n_d_s _a_r_e _d_o_i_n_g

Another example makes use of zzsshh's process substitution.  If
you run NIS, and you miss being able to do this:

%% ggrreepp ppffaallssttaadd //eettcc//ppaasssswwdd

you  can  define  an  alias that will seem more natural than
yyppmmaattcchh ppffaallssttaadd ppaasssswwdd:

%% aalliiaass --gg PPAASSSS==''<<((yyppccaatt ppaasssswwdd))''
%% ggrreepp ppffaallssttaadd PPAASSSS
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh

If you're really crazy, you can even call it //eettcc//ppaasssswwdd:

%% aalliiaass --gg //eettcc//ppaasssswwdd==''<<((yyppccaatt ppaasssswwdd))''
%% ggrreepp ppffaallssttaadd //eettcc//ppaasssswwdd
ppffaallssttaadd::**::33556644::3355::PPaauull JJoohhnn FFaallssttaadd:://uu//ppffaallssttaadd:://uussrr//pprriinncceettoonn//bbiinn//zzsshh

The last example shows one of the perils of global  aliases;
they  have a lot of potential to cause confusion.  For exam-
ple, if you defined a global alias called || (which is possi-
ble), zzsshh would begin to act very strangely; every pipe sym-
bol would be replaced with the text of your alias.  To  some
extent,  global  aliases are like macros in C; discretion is
advised in using them and in choosing names for them.  Using









                            -20-


names  in all caps is not a bad idea, especially for aliases
which introduce shell metasyntax (like MM and GGFF above).

Note that zzsshh aliases are not like csh aliases.  The  syntax
for  defining  them is different, and they do not have argu-
ments.  All your favorite csh aliases will probably not work
under zzsshh.  For example, if you try:

aalliiaass rrmm mmvv ''\\!!** //ttmmpp//wwaasstteebbaasskkeett''

no  aliases  will  be  defined,  but  zzsshh will not report an
error.  In csh, this line defines an  alias  that  makes  rrmm
safe---files  that  are  rrmm'd  will  be moved to a temporary
directory instead of instantly destroyed.  In zzsshh's  syntax,
however,  this  line  asks  the  shell to print any existing
alias definitions for rrmm, mmvv, or !!** //ttmmpp//wwaasstteebbaasskkeett.  Since
there  are  none, most likely, the shell will not print any-
thing, although aalliiaass will return a nonzero exit code.   The
proper syntax is this:

aalliiaass rrmm==''mmvv \\!!** //ttmmpp//wwaasstteebbaasskkeett''

However, this won't work either:

%% rrmm ffoooo..ddvvii
zzsshh:: nnoo mmaattcchheess ffoouunndd:: !!**

While  this makes rrmm safe, it is certainly not what the user
intended.  In zzsshh, you must use a shell function for this:

%% uunnaalliiaass rrmm
%% rrmm (()) {{ mmvv $$** //ttmmpp//wwaasstteebbaasskkeett }}
%% rrmm ffoooo..ddvvii
%% llss //ttmmpp//wwaasstteebbaasskkeett
ffoooo..ddvvii

While this is much cleaner and easier to read  (I  hope  you
will  agree), it is not csh-compatible.  Therefore, a script
to convert csh aliases and variables has been provided.  You
should  only  need  to  use it once, to convert all your csh
aliases and parameters to zzsshh format:

%% ccsshh
ccsshh>> aalliiaass
ll       llss --AAFF
mmoorree    lleessss
oonn      llaasstt --22 !!::11 ;; wwhhoo || ggrreepp !!::11
ccsshh>> eexxiitt
%% cc22zz >>nneeaatt__zzsshh__aalliiaasseess
%% ccaatt nneeaatt__zzsshh__aalliiaasseess
aalliiaass ll==''llss --AAFF''
aalliiaass mmoorree==''lleessss''
oonn (()) {{ llaasstt --22 $$11 ;; wwhhoo || ggrreepp $$11 }}
......









                            -21-


The first two aliases were converted to regular zzsshh aliases,
while  the  third,  since it needed to handle arguments, was
converted to a function.  cc22zz can convert  most  aliases  to
zzsshh  format  without any problems.  However, if you're using
some really arcane csh tricks, or if you have an alias  with
a  name  like ddoo (which is reserved in zzsshh), you may have to
fix some of the aliases by hand.

The cc22zz script checks your csh setup, and produces a list of
zzsshh commands which replicate your aliases and parameter set-
tings as closely as possible.  You could include its  output
in your startup file, ..zzsshhrrcc.

HHiissttoorryy

There  are  several  ways to manipulate history in zzsshh.  One
way is to use csh-style !! history:

%% //uussrr//llooccaall//bbiinn//!!::00 !!--22**::ss//ffoooo//bbaarr// >>>>!!$$

If you don't want to use this, you can turn it off by typing
sseettoopptt  nnoobbaanngghhiisstt.   If you are afraid of accidentally exe-
cuting the wrong command you can set the _H_I_S_T_V_E_R_I_F_Y  option.
If  this  option  is  set, commands that result from history
expansion will not be executed immediately, but will be  put
back into the editor buffer for further consideration.

If  you're  not  familiar  with !! history, here follows some
explanation.  History substitutions always start with  a  !!,
commonly  called  "bang".   After  the !! comes an (optional)
designation of which "event" (command) to use, then a colon,
and  then a designation of what word of that command to use.
For example, !!--_n refers to the command _n commands ago.

%% llss
ffoooo  bbaarr
%% ccdd ffoooo
%% !!--22
llss
bbaazz  bbaamm

No word designator was used, which means that the whole com-
mand  referred  to  was  repeated.  Note that the shell will
echo the result of the history substitution.  The word  des-
ignator  can, among other things, be a number indicating the
argument to use, where 00 is the command.

%% //uussrr//bbiinn//llss ffoooo
ffoooo
%% !!::00 bbaarr
//uussrr//bbiinn//llss bbaarr
bbaarr

In this example, no event designator was used,  which  tells









                            -22-


zzsshh  to  use  the  previous command.  A $$ specifies the last
argument

%% mmkkddiirr //uussrr//llooccaall//lliibb//eemmaaccss//ssiittee--lliisspp//ccaallcc
%% ccdd !!::$$
ccdd //uussrr//llooccaall//lliibb//eemmaaccss//ssiittee--lliisspp//ccaallcc

If you use more words of the same command, only the first  !!
needs an event designator.

%% mmaakkee pprriigg >>>> mmaakkee..lloogg
mmaakkee:: ****** NNoo rruullee ttoo mmaakkee ttaarrggeett ``pprriigg''..  SSttoopp..
%% ccdd ssrrcc
%% !!--22::00 pprroogg >>>> !!::$$
mmaakkee pprroogg >>>> mmaakkee..lloogg

This  is different from csh, where a bang with no event des-
ignator always refers to the previous command.  If you actu-
ally like this behaviour, set the _C_S_H_J_U_N_K_I_E_H_I_S_T_O_R_Y option.

%% sseettoopptt ccsshhjjuunnkkiieehhiissttoorryy
%% !!--22::00 pprroogg22 >>>> !!::$$
mmaakkee pprroogg22 >>>> ccsshhjjuunnkkiieehhiissttoorryy

Another  way  to  use history is to use the ffcc command.  For
example, if you type an erroneous command:

%% ffoorr ii iinn ``ccaatt //eettcc//cclliieennttss``
 ddoo
 rrppuu $$ii
 ddoonnee
zzsshh:: ccoommmmaanndd nnoott ffoouunndd:: rrppuu
zzsshh:: ccoommmmaanndd nnoott ffoouunndd:: rrppuu
zzsshh:: ccoommmmaanndd nnoott ffoouunndd:: rrppuu
...

typing ffcc will execute an editor on this  command,  allowing
you  to  fix it.  (The default editor is vvii, by the way, not
eedd).

%% ffcc
4499
//rrppuu//ss////rruupp//pp
 rruupp $$ii
ww
4499
qq
ffoorr ii iinn ``ccaatt //eettcc//cclliieennttss``
 ddoo
 rruupp $$ii
 ddoonnee
        bbeeaamm    uupp  22 ddaayyss,, 1100::1177,,    llooaadd aavveerraaggee:: 00..8866,, 00..8800,, 00..5500
         bbooww    uupp  44 ddaayyss,,  88::4411,,    llooaadd aavveerraaggee:: 00..9911,, 00..8800,, 00..5500
        bbuurrnn    uupp          1177::1188,,    llooaadd aavveerraaggee:: 00..9911,, 00..8800,, 00..5500









                            -23-


       bbuurrsstt    uupp  99 ddaayyss,,  11::4499,,    llooaadd aavveerraaggee:: 00..9955,, 00..8800,, 00..5500
         ttaann    uupp          1111::1144,,    llooaadd aavveerraaggee:: 00..9911,, 00..8800,, 00..5500
       bbaatthhee    uupp  33 ddaayyss,, 1177::4499,,    llooaadd aavveerraaggee:: 11..8844,, 11..7799,, 11..5500
        bbiirrdd    uupp  11 ddaayy,,   99::1133,,    llooaadd aavveerraaggee:: 11..9955,, 11..8822,, 11..5511
      bboonnnneett    uupp  22 ddaayyss,, 2211::1188,,    llooaadd aavveerraaggee:: 00..9933,, 00..8800,, 00..5500
...

A variant of the ffcc command is rr, which redoes the last com-
mand, with optional changes:

%% eecchhoo ffoooo
ffoooo
%% rr
eecchhoo ffoooo
ffoooo

%% eecchhoo ffoooo
ffoooo
%% rr ffoooo==bbaarr
eecchhoo bbaarr
bbaarr


CCoommmmaanndd LLiinnee EEddiittiinngg

zzsshh's  command  line  editor, ZZLLEE, is quite powerful.  It is
designed to emulate either  emacs  or  vi;  the  default  is
emacs.   To  set  the bindings for vi mode, type bbiinnddkkeeyy --vv.
If your EEDDIITTOORR or VVIISSUUAALL environment  variable  is  vi,  zzsshh
will  use  vi  emulation by default.  You can then switch to
emacs mode with bbiinnddkkeeyy --ee.

In addition to basic editing, the shell allows you to recall
previous  lines in the history.  In emacs mode, this is done
with _^_P (control-P) or (on many terminals) with the  cursor-
up key:

%% llss ~~
--           RREEAADDMMEE      ffiillee        mmaaiill        ppuubb         ttmmpp
MMaaiillbbooxxeess   bbiinn         ffuunncc        nniicceeccoolloorrss  ssccrr         zzsshh
NNeewwss        eettcc         iirriiss        nnootteess       ssrrcc
%% eecchhoo ffoooobbaarr
ffoooobbaarr
%% _^_P
%% eecchhoo ffoooobbaarr_^_P
%% llss ~~__

Pressing  _^_P once brings up the previous line (eecchhoo ffoooobbaarr);
pressing it again brings up the line  before  that  (llss  ~~).
The  cursor  is left at the end of the line, allowing you to
edit the line if  desired  before  executing  it.   In  many
cases,  ZZLLEE eliminates the need for the ffcc command, since it
is powerful enough to handle even multiline commands:










                            -24-


%% ffoorr ii iinn aa bb cc dd ee
>> ddoo
>> eecchhoo $$ii
>> ddoonnee
aa
bb
cc
dd
ee
%% _^_P
%% ffoorr ii iinn aa bb cc dd ee
 ddoo
 eecchhoo $$ii
 ddoonnee__

Now you can just move up to the part you want to change...

%% ffoorr ii iinn aa__ bb cc dd ee
 ddoo
 eecchhoo $$ii
 ddoonnee

change it, and execute the new command.

%% ffoorr ii iinn ff gg hh ii jj
 ddoo
 eecchhoo $$ii
 ddoonnee
ff
gg
hh
ii
jj

Also, you can search the history for a certain command using
_E_S_C_-_P, this will look for the last command that started with
the (part of the) word at the beginning of the current line.
Hitting _E_S_C_-_P another time gets you the command before that,
etc.

%% sseett _E_S_C_-_P
%% sseettoopptt aauuttoolliisstt _E_S_C_-_P
%% sseettoopptt nnooccoorrrreecctt__

Another way is to do an incremental search, emacs-style:

%% _^_R
%% __
ii--sseeaarrcchh::

%% llss__ //uussrr//bbiinn
ii--sseeaarrcchh:: ll

%% ddaattee >> ffooooffiillee..__cc









                            -25-


ii--sseeaarrcchh:: llee

Suppose you have retrieved an old history event  in  one  of
these ways and would like to execute several consecutive old
commands starting with this one.  ^^OO will execute  the  cur-
rent  command and then put the next command from the history
into the editor buffer.  Typing ^^OO several times will there-
fore  reexecute  several  consecutive commands from the his-
tory.  Of course, you can edit some  of  those  commands  in
between.

In  addition  to completion (see below), _T_A_B performs expan-
sion if possible.

%% llss **..cc_T_A_B
%% llss ffooooffiillee..cc ffoorrttuunnee..cc rrnndd..cc ssttrrffiillee..cc uunnssttrr..cc__

For example, suppose you have a bunch of weird files  in  an
important directory:

%% llss
  ** ** **       ;; && %% $$????ffoooo  ddssppffookk        ffoooo..cc
  !!""ffoooo""!!       `` \\ ``         ffoooo           rrrrrr

You want to remove them, but you don't want to damage ffoooo..cc.
Here is one way to do this:

%% rrmm **_T_A_B
%% rrmm \\ \\ \\**\\ \\**\\ \\**\\ \\ \\  \\!!\\""ffoooo\\""\\!! \\;;\\ \\&&\\ %%\\ \\$$''
''''ffoooo \\``\\ \\\\\\ \\`` ddssppffookk ffoooo ffoooo..cc rrrrrr__

When you expand **, zzsshh inserts the names of  all  the  files
into  the  editing  buffer, with proper shell quoting.  Now,
just move back and remove ffoooo..cc from the buffer:

%% rrmm \\ \\ \\**\\ \\**\\ \\**\\ \\ \\  \\!!\\""ffoooo\\""\\!! \\;;\\ \\&&\\ %%\\ \\$$''
''''ffoooo \\``\\ \\\\\\ \\`` ddssppffookk ffoooo rr__rrrr

and press return.  Everything except ffoooo..cc will  be  deleted
from  the  directory.  If you do not want to actually expand
the current word, but would like to  see  what  the  matches
are, type ^^XXgg.

%% rrmm ff**_^_X_g
ffoooo    ffoooo..cc
%% rrmm ff**__

Here's  another trick; let's say you have typed this command
in:

%% ggcccc --oo xx..oouutt ffoooobb..cc --gg --WWppooiinntteerr--aarriitthh --WWttrriiggrraapphhss__

and you forget which library you want.  You need  to  escape
out  for  a  minute and check by typing llss //uussrr//lliibb, or some









                            -26-


other such command; but you don't want to retype  the  whole
command  again,  and  you can't press return now because the
current command is incomplete.  In zzsshh, you can put the line
on  the  _b_u_f_f_e_r _s_t_a_c_k, using _E_S_C_-_Q, and type some other com-
mands.  The next time a prompt is printed, the ggcccc line will
be  popped off the stack and put in the editing buffer auto-
matically; you can then enter the proper  library  name  and
press  return  (or,  _E_S_C_-_Q  again  and  look  for some other
libraries whose names you forgot).

A similar situation: what if you forget the  option  to  gcc
that  finds  bugs using AI techniques?  You could either use
_E_S_C_-_Q again, and type mmaann ggcccc, or  you  could  press  _E_S_C_-_H,
which  essentially  does the same thing; it puts the current
line on the buffer stack, and executes the command  rruunn--hheellpp
ggcccc, where rruunn--hheellpp is an alias for mmaann.

Another  interesting  command  is  _E_S_C_-_A.  This executes the
current line, but retains it  in  the  buffer,  so  that  it
appears  again  when  the next prompt is printed.  Also, the
cursor stays in the same place.  This is useful for  execut-
ing a series of similar commands:

%% cccc ggrrookk..cc --gg --llcc --llggll --llssuunn --llmmaalllloocc --BBssttaattiicc --oo bb..oouutt
%% cccc ffuubbaarr..cc --gg --llcc --llggll --llssuunn --llmmaalllloocc --BBssttaattiicc --oo bb..oouutt
%% cccc ffoooobbllee..cc --gg --llcc --llggll --llssuunn --llmmaalllloocc --BBssttaattiicc --oo bb..oouutt


The _E_S_C_-_' command is useful for managing the shell's quoting
conventions.  Let's say you want to print this string:

ddoonn''tt ddoo tthhaatt;; ttyyppee ''rrmm --rrff \\**'',, wwiitthh aa \\ bbeeffoorree tthhee **..

All that is necessary is to type it into the editing buffer:

%% ddoonn''tt ddoo tthhaatt;; ttyyppee ''rrmm --rrff \\**'',, wwiitthh aa \\ bbeeffoorree tthhee **..

press _E_S_C_-_' (escape-quote):

%% ''ddoonn''\\''''tt ddoo tthhaatt;; ttyyppee ''\\''''rrmm --rrff \\**''\\'''',, wwiitthh aa \\ bbeeffoorree tthhee **..''

then move to the beginning and add the eecchhoo command.

%% eecchhoo ''ddoonn''\\''''tt ddoo tthhaatt;; ttyyppee ''\\''''rrmm --rrff \\**''\\'''',, wwiitthh aa \\ bbeeffoorree tthhee **..''
ddoonn''tt ddoo tthhaatt;; ttyyppee ''rrmm --rrff \\**'',, wwiitthh aa \\ bbeeffoorree tthhee **..

Let's  say  you want to create an alias to do this eecchhoo com-
mand.  This can be done by recalling the line  with  _^_P  and
pressing _E_S_C_-_' again:

%% ''eecchhoo ''\\''''ddoonn''\\''''\\''\\''''''\\''''tt ddoo tthhaatt;; ttyyppee ''\\''''\\''\\''''''\\''''rrmm --rrff
\\**''\\''''\\''\\''''''\\'''',, wwiitthh aa \\ bbeeffoorree tthhee **..''\\''''''

and then move to the beginning and add the command to create









                            -27-


an alias.

%% aalliiaass zzooooff==''eecchhoo ''\\''''ddoonn''\\''''\\''\\''''''\\''''tt ddoo tthhaatt;; ttyyppee ''\\''''\\''\\''''''\\''''rrmm
--rrff \\**''\\''''\\''\\''''''\\'''',, wwiitthh aa \\ bbeeffoorree tthhee **..''\\''''''
%% zzooooff
ddoonn''tt ddoo tthhaatt;; ttyyppee ''rrmm --rrff \\**'',, wwiitthh aa \\ bbeeffoorree tthhee **..

If one of these fancy editor commands changes  your  command
line  in a way you did not intend, you can undo changes with
^^__, if you can get it out of your keyboard, or ^^XX^^UU,  other-
wise.

Another use of the editor is to edit the value of variables.
For example, an easy way to change your path is to  use  the
vvaarreedd command:

%% vvaarreedd PPAATTHH
>> //uu//ppffaallssttaadd//ssccrr:://uu//ppffaallssttaadd//bbiinn//ssuunn44:://uu//mmaarruucchhcckk//ssccrr:://uu//ssuubbbbaarraaoo//bbiinn:://uu//mmaarruucc
hhcckk//bbiinn:://uu//ssuubbbbaarraaoo//ssccrriippttss:://uussrr//pprriinncceettoonn//bbiinn:://uussrr//uuccbb:://uussrr//bbiinn:://bbiinn:://uussrr//hhoosstt
ss:://uussrr//pprriinncceettoonn//bbiinn//XX1111:://..//uussrr//llaanngg:://..//uussrr//eettcc:://..//eettcc

You  can now edit the path.  When you press return, the con-
tents of the edit buffer will be assigned to PPAATTHH.

CCoommpplleettiioonn

Another great zzsshh feature is completion.  If  you  hit  _T_A_B,
zzsshh  will  complete  all  kinds  of stuff.  Like commands or
filenames:

%% ccoommpp_T_A_B
%% ccoommpprreessss __

%% llss nniicc_T_A_B
%% llss nniicceeccoolloorrss __

%% llss //uussrr//pprr_T_A_B
%% llss //uussrr//pprriinncceettoonn//__

%% llss --ll ==ccoomm_T_A_B
%% llss --ll ==ccoommpprreessss __

If the completion is ambiguous, the editor  will  beep.   If
you  find  this annoying, you can set the _N_O_L_I_S_T_B_E_E_P option.
Completion can even be done in the middle of words.  To  use
this, you will have to set the _C_O_M_P_L_E_T_E_I_N_W_O_R_D option:

%% sseettoopptt ccoommpplleetteeiinnwwoorrdd
%% llss //uussrr//pptt__oonn_T_A_B
%% llss //uussrr//pprriinncceett__oonn//
%% sseettoopptt aallwwaayyssttooeenndd
%% llss //uussrr//pptt__oonn_T_A_B
%% llss //uussrr//pprriinncceettoonn//__










                            -28-


You can list possible completions by pressing _^_D:

%% llss //vvmmuu_T_A_B _-_-_b_e_e_p_-_-
%% llss //vvmmuunniixx__
%% llss //vvmmuunniixx_^_D
vvmmuunniixx                    vvmmuunniixx..oolldd
vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd  vvmmuunniixx..oorrgg

Or, you could just set the _A_U_T_O_L_I_S_T option:

%% sseettoopptt aauuttoolliisstt
%% llss //vvmmuu_T_A_B _-_-_b_e_e_p_-_-
vvmmuunniixx                    vvmmuunniixx..oolldd
vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd  vvmmuunniixx..oorrgg
%% llss //vvmmuunniixx__

If  you  like  to see the types of the files in these lists,
like in llss --FF, you can set the _L_I_S_T_T_Y_P_E_S  option.   Together
with  _A_U_T_O_L_I_S_T  you  can  use _L_I_S_T_A_M_B_I_G_U_O_U_S.  This will only
list the possibilities if there is no  unambiguous  part  to
add:

%% sseettoopptt lliissttaammbbiigguuoouuss
%% llss //vvmmuu_T_A_B _-_-_b_e_e_p_-_-
%% llss //vvmmuunniixx___T_A_B _-_-_b_e_e_p_-_-
vvmmuunniixx                    vvmmuunniixx..oolldd
vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd  vvmmuunniixx..oorrgg

If  you  don't  want several of these listings to scroll the
screen so much, the _A_L_W_A_Y_S_L_A_S_T_P_R_O_M_P_T option is  useful.   If
set,  you  can  continue  to edit the line you were editing,
with the completion listing appearing beneath it.

Another interesting option is  _M_E_N_U_C_O_M_P_L_E_T_E.   This  affects
the way _T_A_B works.  Let's look at the //vvmmuunniixx example again:

%% sseettoopptt mmeennuuccoommpplleettee
%% llss //vvmmuu_T_A_B
%% llss //vvmmuunniixx_T_A_B
%% llss //vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd_T_A_B
%% llss //vvmmuunniixx..oolldd__

Each time you press _T_A_B, it displays the next possible  com-
pletion.   In  this  way, you can cycle through the possible
completions until you find the one you want.

The _A_U_T_O_M_E_N_U option makes a  nice  compromise  between  this
method  of  completion  and  the regular method.  If you set
this option, pressing _T_A_B  once  completes  the  unambiguous
part  normally,  pressing  the  _T_A_B  key repeatedly after an
ambiguous completion will cycle through the possible comple-
tions.











                            -29-


Another option you could set is _R_E_C_E_X_A_C_T, which causes exact
matches to be accepted, even if  there  are  other  possible
completions:

%% sseettoopptt rreecceexxaacctt
%% llss //vvmmuu_T_A_B _-_-_b_e_e_p_-_-
vvmmuunniixx                    vvmmuunniixx..oolldd
vvmmuunniixx..nneeww..kkeerrnneellmmaapp..oolldd  vvmmuunniixx..oorrgg
%% llss //vvmmuunniixx___T_A_B
%% llss //vvmmuunniixx __

To facilitate the typing of pathnames, a slash will be added
whenever a directory is  completed.   Some  computers  don't
like the spurious slashes at the end of directory names.  In
that case, the _A_U_T_O_R_E_M_O_V_E_S_L_A_S_H option comes to  rescue.   It
will  remove  these  slashes when you type a space or return
after them.

The _f_i_g_n_o_r_e variable lists suffixes of files to ignore  dur-
ing completion.

%% llss ffoooo_T_A_B _-_-_b_e_e_p_-_-
ffooooffiillee..cc  ffooooffiillee..oo
%% ffiiggnnoorree==(( ..oo \\~~ ..bbaakk ..jjuunnkk ))
%% llss ffoooo_T_A_B
%% llss ffooooffiillee..cc __

Since ffooooffiillee..oo has a suffix that is in the ffiiggnnoorree list, it
was not considered a possible completion of ffoooo.

Username completion is also supported:

%% llss ~~ppffaall_T_A_B
%% llss ~~ppffaallssttaadd//__

and parameter name completion:

%% eecchhoo $$OORRGG_T_A_B
%% eecchhoo $$OORRGGAANNIIZZAATTIIOONN __
%% eecchhoo $${{OORRGG_T_A_B
%% eecchhoo $${{OORRGGAANNIIZZAATTIIOONN __

Note that in the last example a space  is  added  after  the
completion  as  usual.   But  if  you want to add a colon or
closing brace, you probably don't  want  this  extra  space.
Setting  the  _A_U_T_O_P_A_R_A_M_K_E_Y_S option will automatically remove
this space if you type a colon or closing brace after such a
completion.

There is also option completion:

%% sseettoopptt nnooccll_T_A_B
%% sseettoopptt nnoocclloobbbbeerr __










                            -30-


and binding completion:

%% bbiinnddkkeeyy ''^^XX^^XX'' ppuu_T_A_B
%% bbiinnddkkeeyy ''^^XX^^XX'' ppuusshh--lliinnee __

The  ccoommppccttll  command  is  used to control completion of the
arguments of specific commands.   For  example,  to  specify
that  certain commands take other commands as arguments, you
use ccoommppccttll --cc:

%% ccoommppccttll --cc mmaann nnoohhuupp
%% mmaann uupptt_T_A_B
%% mmaann uuppttiimmee __

To specify that a command  should  complete  filenames,  you
should use ccoommppccttll --ff.  This is the default.  It can be com-
bined with --cc, as well.

%% ccoommppccttll --ccff eecchhoo
%% eecchhoo uupptt_T_A_B
%% eecchhoo uuppttiimmee __

%% eecchhoo ffoo_T_A_B
%% eecchhoo ffoooo..cc

Similarly, use --oo to specify options, --vv  to  specify  vari-
ables, and --bb to specify bindings.

%% ccoommppccttll --oo sseettoopptt uunnsseettoopptt
%% ccoommppccttll --vv ttyyppeesseett vvaarreedd uunnsseett eexxppoorrtt
%% ccoommppccttll --bb bbiinnddkkeeyy

You  can also use --kk to specify a custom list of keywords to
use in completion.  After the --kk comes either the name of an
array or a literal array to take completions from.

%% ffttpphhoossttss==((ffttpp..uuuu..nneett wwuuaarrcchhiivvee..wwuussttll..eedduu))
%% ccoommppccttll --kk ffttpphhoossttss ffttpp
%% ffttpp wwuu_T_A_B
%% ffttpp wwuuaarrcchhiivvee..wwuussttll..eedduu __

%% ccoommppccttll --kk ''((ccppiirraazzzzii ssuubbbbaarraaoo ssuukktthhnnkkrr))'' mmaaiill ffiinnggeerr
%% ffiinnggeerr ccpp_T_A_B
%% ffiinnggeerr ccppiirraazzzzii __

To  better  specify the files to complete for a command, use
the --gg option which takes any glob pattern as  an  argument.
Be sure to quote the glob patterns as otherwise they will be
expanded when the ccoommppccttll command is run.

%% llss
lleetttteerr..tteexx  lleetttteerr..ddvvii  lleetttteerr..aauuxx  lleetttteerr..lloogg  lleetttteerr..ttoocc
%% ccoommppccttll --gg ''**..tteexx'' llaatteexx
%% ccoommppccttll --gg ''**..ddvvii'' xxddvvii ddvviippss









                            -31-


%% llaatteexx ll_T_A_B
%% llaatteexx lleetttteerr..tteexx __
%% xxddvvii ll_T_A_B
%% xxddvvii lleetttteerr..ddvvii __

Glob patterns can include qualifiers within parentheses.  To
rmdir  only  directories  and cd to directories and symbolic
links pointing to them:

%% ccoommppccttll --gg ''**((--//))'' ccdd
%% ccoommppccttll --gg ''**((//))'' rrmmddiirr

RCS users like to run commands on files which are not in the
current  directory,  but  in the RCS subdirectory where they
all get ,,vv suffixes.  They might like to use

%% ccoommppccttll --gg ''RRCCSS//**((::tt::ss//\\,,vv////))'' ccoo rrlloogg rrccss
%% llss RRCCSS
bbuuiillttiinn..cc,,vv  lleexx..cc,,vv      zzllee__mmaaiinn..cc,,vv
%% rrlloogg bbuu_T_A_B
%% rrlloogg bbuuiillttiinn..cc __

The ::tt modifier keeps only the last part of the pathname and
the ::ss//\\,,vv//// will replace any ,,vv by nothing.

The  --ss  flag  is similar to --gg, but it uses all expansions,
instead of just globbing, like  brace  expansion,  parameter
substitution and command substitution.

%% ccoommppccttll --ss ''$$((sseettoopptt))'' uunnsseettoopptt

will  only  complete  options  which  are actually set to be
arguments to uunnsseettoopptt.

Sometimes a command takes another command as  its  argument.
You  can tell zzsshh to complete commands as the first argument
to such a command and then use the completion method of  the
second  command.  The --ll flag with a null-string argument is
used for this.

%% ccoommppccttll --ll '''' nnoohhuupp eexxeecc
%% nnoohhuupp ccoommpp_T_A_B
%% nnoohhuupp ccoommpprreessss __
%% nnoohhuupp ccoommpprreessss ffiill_T_A_B
%% nnoohhuupp ccoommpprreessss ffiilleennaammee __

Sometimes you would like to run really complicated  commands
to  find out what the possible completions are.  To do this,
you can specify a shell function  to  be  called  that  will
assign  the possible completions to a variable called reply.
Note that this variable must be an  array.   Here's  another
(much slower) way to get the completions for ccoo and friends:

%% ffuunnccttiioonn ggeettrrccss {{









                            -32-


>> rreeppllyy==(())
>> ffoorr ii iinn RRCCSS//**
>>   ddoo
>>   rreeppllyy==(($$rreeppllyy[[**]] $$((bbaasseennaammee $$ii ,,vv))))
>>   ddoonnee
>> }}
%% ccoommppccttll --KK ggeettrrccss ccoo rrlloogg rrccss

Some command arguments use a prefix that is not  a  part  of
the  things  to  complete.  The kill builtin command takes a
signal name after a --.  To make such a prefix be ignored  in
the completion process, you can use the --PP flag.

%% ccoommppccttll --PP -- --kk ssiiggnnaallss kkiillll
%% kkiillll --HH_T_A_B
%% kkiillll --HHUUPP __

TeX  is  usually run on files ending in ..tteexx, but also some-
times on other files.  It is somewhat  annoying  to  specify
that the arguments of TeX should end in ..tteexx and then not be
able to complete these other files.  Therefore you can spec-
ify  things like "Complete to files ending in ..tteexx if avail-
able, otherwise complete to any filename.".   This  is  done
with _x_o_red completion:

%% ccoommppccttll --gg ''**..tteexx'' ++ --ff tteexx

The  ++  tells  the  editor  to only take the next thing into
account if the current one doesn't generate any matches.  If
you have not changed the default completion, the above exam-
ple is in fact equivalent to

%% ccoommppccttll --gg ''**..tteexx'' ++ tteexx

as a lone ++ at the  end  is  equivalent  to  specifying  the
default  completion after the ++.  This form of completion is
also frequently used if you want to run some command only on
a  certain type of files, but not necessarily in the current
directory.  In this case you  will  want  to  complete  both
files of this type and directories.  Depending on your pref-
erences you can use either of

%% ccoommppccttll --gg ''**..ppss'' ++ --gg ''**((--//))'' gghhoossttvviieeww
%% ccoommppccttll --gg ''**..ppss **((--//))'' gghhoossttvviieeww

where the first one will only complete directories (and sym-
bolic  links  pointing to directories) if no postscript file
matches the already typed part of the argument.

EExxtteennddeedd ccoommpplleettiioonn

If you play with completion, you will soon notice  that  you
would  like  to  specify what to complete, depending on what
flags you give to the command  and  where  you  are  on  the









                            -33-


command  line.   For example, a command could take any file-
name argument after a --ff flag, a username after  a  --uu  flag
and an executable after a --xx flag.  This section will intro-
duce you to the ways to specify these things.  To many  peo-
ple it seems rather difficult at first, but taking the trou-
ble to understand it can save you lots of typing in the end.
Even  I  keep being surprised when zzsshh manages to complete a
small or even empty prefix to the  right  file  in  a  large
directory.

To  tell  zzsshh  about  these  kinds  of  completion,  you use
"extended completion" by specifying the --xx flag to  compctl.
The  --xx flag takes a list of patterns/flags pairs.  The pat-
terns specify when to complete and the flags  specify  what.
The  flags  are  simply those mentioned above, like --ff or --gg
_g_l_o_b _p_a_t_t_e_r_n.

As an example, the rr[[_s_t_r_i_n_g_1,,_s_t_r_i_n_g_2]] pattern matches if the
cursor  is  after  something  that  starts  with _s_t_r_i_n_g_1 and
before something that starts with _s_t_r_i_n_g_2.  The  _s_t_r_i_n_g_2  is
often  something  that  you do not want to match anything at
all.

%% llss
ffoooo11   bbaarr11   ffoooo..ZZ  bbaarr..ZZ
%% ccoommppccttll --gg ''^^**..ZZ'' --xx ''rr[[--dd,,------]]'' --gg ''**..ZZ'' ---- ccoommpprreessss
%% ccoommpprreessss ff_T_A_B
%% ccoommpprreessss ffoooo11 __
%% ccoommpprreessss --dd ff_T_A_B
%% ccoommpprreessss --dd ffoooo..ZZ __

In the above example, if the cursor is after the --dd the pat-
tern  will match and therefore zzsshh uses the --gg **..ZZ flag that
will only complete files ending in  ..ZZ.   Otherwise,  if  no
pattern  matches, it will use the flags before the --xx and in
this case complete every file that does not end in ..ZZ.

The ss[[_s_t_r_i_n_g]] pattern matches if  the  current  word  starts
with _s_t_r_i_n_g.  The _s_t_r_i_n_g itself is not considered to be part
of the completion.

%% ccoommppccttll --xx ''ss[[--]]'' --kk ssiiggnnaallss ---- kkiillll
%% kkiillll --HH_T_A_B
%% kkiillll --HHUUPP __

The ttaarr command takes a tar file as an argument after the --ff
option.  The cc[[_o_f_f_s_e_t,,_s_t_r_i_n_g]] pattern matches if the word in
position _o_f_f_s_e_t relative to  the  current  word  is  _s_t_r_i_n_g.
More  in particular, if _o_f_f_s_e_t is -1, it matches if the pre-
vious word is _s_t_r_i_n_g.  This suggests

%% ccoommppccttll --ff --xx ''cc[[--11,,--ff]]'' --gg ''**..ttaarr'' ---- ttaarr

But this is not enough.  The --ff option could be the last  of









                            -34-


a  longer  string  of  options.   CC[[...,,...]]  is  just  like
cc[[...,,...]], except that it uses glob-like  pattern  matching
for _s_t_r_i_n_g.  So

%% ccoommppccttll --ff --xx ''CC[[--11,,--**ff]]'' --gg ''**..ttaarr'' ---- ttaarr

will complete tar files after any option string ending in an
ff.  But we'd like even more.  Old versions of tar  used  all
options  as  the first argument, but without the minus sign.
This might be inconsistent with option usage  in  all  other
commands,  but  it  is  still supported by newer versions of
ttaarr.  So we would also like to complete  tar  files  if  the
first argument ends in an ff and we're right behind it.

We  can  `and'  patterns  by putting them next to each other
with a space between  them.   We  can  `or'  these  sets  by
putting  comma's  between  them.  We will also need some new
patterns.  pp[[_n_u_m]] will match if the  current  argument  (the
one    to    be    completed)   is   the   _n_u_mth   argument.
WW[[_i_n_d_e_x,,_p_a_t_t_e_r_n]] will match if the argument in  place  _i_n_d_e_x
matches the _p_a_t_t_e_r_n.  This gives us

%% ccoommppccttll --ff --xx ''CC[[--11,,--**ff]] ,, WW[[11,,**ff]] pp[[22]]'' --gg ''**..ttaarr'' ---- ttaarr

In  words: If the previous argument is an option string that
ends in an ff, or the first argument ended in an ff and it  is
now the second argument, then complete only filenames ending
in ..ttaarr.

All the above examples used only one set  of  patterns  with
one  completion  flag.   You  can  use several of these pat-
tern/flag pairs separated by a --.  The first  matching  pat-
tern  will  be used.  Suppose you have a version of ttaarr that
supports compressed files by using a --ZZ option.  Leaving the
old tar syntax aside for a moment, we would like to complete
files ending in ..ttaarr..ZZ if a --ZZ  option  has  been  used  and
files  ending  in  ..ttaarr  otherwise, all this only after a --ff
flag.  Again, the --ZZ can be alone or it can  be  part  of  a
longer  option  string,  perhaps  the same as that of the --ff
flag.  Here's how to do it; note the backslash and the  sec-
ondary prompt which are not part of the ccoommppccttll command.

%% ccoommppccttll --ff --xx ''CC[[--11,,--**ZZ**ff]] ,, RR[[--**ZZ**,,------]] CC[[--11,,--**ff]]'' --gg ''**..ttaarr..ZZ'' -- \\
>> ''CC[[--11,,--**ff]]'' --gg ''**..ttaarr'' ---- ttaarr

The first pattern set tells us to match if either the previ-
ous argument was an option string including a ZZ  and  ending
in an ff or there was an option string with a ZZ somewhere and
the previous word was any option string ending in an ff.   If
this  is  the  case, we need a compressed tar file.  Only if
this is not the case the second pattern set will be  consid-
ered.    By  the  way,  RR[[_p_a_t_t_e_r_n_1,,_p_a_t_t_e_r_n_2]]  is  just  like
rr[[...,,...]] except that it uses pattern matching  with  shell
metacharacters instead of just strings.









                            -35-


You  will have noticed the ---- before the command name.  This
ends the list of pattern/flag pairs of --xx.   It  is  usually
used  just  before the command name, but you can also use an
extended completion as one part of a list of  xored  comple-
tions, in which case the ---- appears just before one of the ++
signs.

Note the difference between  using  extended  completion  as
part of a list of xored completions as in

%% llss
ffoooo  bbaarr
%% ccoommppccttll --xx ''rr[[--dd,,------]]'' --gg ''**..ZZ'' ---- ++ --gg ''^^**..ZZ'' ccoommpprreessss
%% ccoommpprreessss --dd ff_T_A_B
%% ccoommpprreessss --dd ffoooo __

and specifying something before the --xx as in

%% ccoommppccttll --gg ''^^**..ZZ'' --xx ''rr[[--dd,,------]]'' --gg ''**..ZZ'' ---- ccoommpprreessss
%% ccoommpprreessss --dd ff_T_A_B
%% ccoommpprreessss --dd ff__

In  the first case, the alternative glob pattern (^^**..ZZ) will
be used if the first part does  not  generate  any  possible
completions,  while  in the second case the alternative glob
pattern will only be used  if  the  rr[[...]]  pattern  doesn't
match.

BBiinnddiinnggss

Each  of  the  editor  commands  we have seen was actually a
function bound by default to a certain key.  The real  names
of the commands are:

eexxppaanndd--oorr--ccoommpplleettee   _T_A_B
ppuusshh--lliinnee            _E_S_C_-_Q
rruunn--hheellpp             _E_S_C_-_H
aacccceepptt--aanndd--hhoolldd      _E_S_C_-_A
qquuoottee--lliinnee           _E_S_C_-_'

These  bindings  are arbitrary; you could change them if you
want.  For example, to bind aacccceepptt--lliinnee to _^_Z:

%% bbiinnddkkeeyy ''^^ZZ'' aacccceepptt--lliinnee

Another idea would be to bind the delete key to ddeelleettee--cchhaarr;
this might be convenient if you use _^_H for backspace.

%% bbiinnddkkeeyy ''^^??'' ddeelleettee--cchhaarr

Or, you could bind _^_X_^_H to rruunn--hheellpp:

%% bbiinnddkkeeyy ''^^XX^^HH'' rruunn--hheellpp










                            -36-


Other examples:

%% bbiinnddkkeeyy ''^^XX^^ZZ'' uunniivveerrssaall--aarrgguummeenntt
%% bbiinnddkkeeyy '' '' mmaaggiicc--ssppaaccee
%% bbiinnddkkeeyy --ss ''^^TT'' ''uuppttiimmee
>> ''
%% bbiinnddkkeeyy ''^^QQ'' ppuusshh--lliinnee--oorr--eeddiitt

uunniivveerrssaall--aarrgguummeenntt  multiplies  the next command by 4.  Thus
_^_X_^_Z_^_W might delete the last four words on the line.  If you
bind  space to mmaaggiicc--ssppaaccee, then csh-style history expansion
is done on the line whenever you press the space bar.

Something that often happens is that I am typing a multiline
command  and discover an error in one of the previous lines.
In this case, ppuusshh--lliinnee--oorr--eeddiitt will put the  entire  multi-
line  construct  into the editor buffer.  If there is only a
single line, it is equivalent to ppuusshh--lliinnee.

The --ss flag to bbiinnddkkeeyy specifies that you  are  binding  the
key  to  a  string,  not  a  command.   Thus bbiinnddkkeeyy --ss ''^^TT''
''uuppttiimmee\\nn'' lets you VMS lovers get the load average whenever
you press _^_T.

If  you  have a NeXT keyboard, the one with the || and \\ keys
very inconveniently placed, the following bindings may  come
in handy:

%% bbiinnddkkeeyy --ss ''\\ee//'' ''\\\\''
%% bbiinnddkkeeyy --ss ''\\ee=='' ''||''

Now  you can type _A_L_T_-_/ to get a backslash, and _A_L_T_-_= to get
a vertical bar.  This only  works  inside  zzsshh,  of  course;
bbiinnddkkeeyy  has  no  effect  on the key mappings inside ttaallkk or
mmaaiill, etc.

Some people like to bind ^^SS and ^^QQ to editor commands.  Just
binding these has no effect, as the terminal will catch them
and use them for flow control.  You could unset them as stop
and  start characters, but most people like to use these for
external commands.  The solution is to set the _N_O_F_L_O_W_C_O_N_T_R_O_L
option.   This  will  allow  you  to bind the start and stop
characters to editor commands, while retaining their  normal
use for external commands.

PPaarraammeetteerr SSuubbssttiittuuttiioonn

In zzsshh, parameters are set like this:

%% ffoooo==bbaarr
%% eecchhoo $$ffoooo
bbaarr

Spaces before or after the == are frowned upon:









                            -37-


%% ffoooo == bbaarr
zzsshh:: ccoommmmaanndd nnoott ffoouunndd:: ffoooo

Also, sseett doesn't work for setting parameters:

%% sseett ffoooo==bbaarr
%% sseett ffoooo == bbaarr
%% eecchhoo $$ffoooo

%%

Note  that  no  error  message was printed.  This is because
both of these commands were perfectly valid; the sseett builtin
assigns  its arguments to the _p_o_s_i_t_i_o_n_a_l _p_a_r_a_m_e_t_e_r_s ($$11, $$22,
etc.).

%% sseett ffoooo==bbaarr
%% eecchhoo $$11
ffoooo==bbaarr
%% sseett ffoooo == bbaarr
%% eecchhoo $$33 $$22
bbaarr ==

If you're really intent on using the csh  syntax,  define  a
function like this:

%% sseett (()) {{
>>    eevvaall ""$$11$$22$$33""
>> }}
%% sseett ffoooo == bbaarr
%% sseett ffuuuu==bbrrrrrr
%% eecchhoo $$ffoooo $$ffuuuu
bbaarr bbrrrrrr

But  then,  of  course  you  can't  use the form of sseett with
options, like sseett --FF (which turns off filename  generation).
Also,  the  sseett command by itself won't list all the parame-
ters like it should.  To get around that  you  need  a  ccaassee
statement:

%% sseett (()) {{
>>    ccaassee $$11 iinn
>>    --**||++**||'''')) bbuuiillttiinn sseett $$** ;;;;
>>    **)) eevvaall ""$$11$$22$$33"" ;;;;
>>    eessaacc
>> }}

For the most part, this should make csh users happy.

The following sh-style operators are supported in zzsshh:

%% uunnsseett nnuullll
%% eecchhoo $${{ffoooo--xxxxxx}}
bbaarr









                            -38-


%% eecchhoo $${{nnuullll--xxxxxx}}
xxxxxx
%% uunnsseett nnuullll
%% eecchhoo $${{nnuullll==xxxxxx}}
xxxxxx
%% eecchhoo $$nnuullll
xxxxxx
%% eecchhoo $${{ffoooo==xxxxxx}}
bbaarr
%% eecchhoo $$ffoooo
bbaarr
%% uunnsseett nnuullll
%% eecchhoo $${{nnuullll++sseett}}

%% eecchhoo $${{ffoooo++sseett}}
sseett

Also,  csh-style  :: modifiers may be appended to a parameter
substitution.

%% eecchhoo $$PPWWDD
//hhoommee//lleeaarrnniinngg//ppff//zzsshh//zzsshh22..0000//ssrrcc
%% eecchhoo $$PPWWDD::hh
//hhoommee//lleeaarrnniinngg//ppff//zzsshh//zzsshh22..0000
%% eecchhoo $$PPWWDD::hh::hh
//hhoommee//lleeaarrnniinngg//ppff//zzsshh
%% eecchhoo $$PPWWDD::tt
ssrrcc
%% nnaammee==ffoooo..cc
%% eecchhoo $$nnaammee
ffoooo..cc
%% eecchhoo $$nnaammee::rr
ffoooo
%% eecchhoo $$nnaammee::ee
cc

The equivalent constructs in ksh (which are  also  supported
in zzsshh) are a bit more general and easier to remember.  When
the shell expands  $${{ffoooo##_p_a_t}},  it  checks  to  see  if  _p_a_t
matches  a  substring  at the beginning of the value of ffoooo.
If so, it removes that portion of ffoooo,  using  the  shortest
possible  match.   With  $${{ffoooo####_p_a_t}},  the  longest possible
match is removed.  $${{ffoooo%%_p_a_t}}  and  $${{ffoooo%%%%_p_a_t}}  remove  the
match  from  the end.  Here are the ksh equivalents of the ::
modifiers:

%% eecchhoo $${{PPWWDD%%//**}}
//hhoommee//lleeaarrnniinngg//ppff//zzsshh//zzsshh22..0000
%% eecchhoo $${{PPWWDD%%//**//**}}
//hhoommee//lleeaarrnniinngg//ppff//zzsshh
%% eecchhoo $${{PPWWDD####**//}}
ssrrcc
%% eecchhoo $${{nnaammee%%..**}}
ffoooo









                            -39-


%% eecchhoo $${{nnaammee##**..}}
cc

zzsshh also has upper/lowercase modifiers:

%% xxxx==TTeesstt
%% eecchhoo $$xxxx::uu
TTEESSTT
%% eecchhoo $$xxxx::ll
tteesstt

and a substitution modifier:

%% eecchhoo $$nnaammee::ss//ffoooo//bbaarr//
bbaarr..cc
%% llss
ffoooo..cc    ffoooo..hh    ffoooo..oo    ffoooo..pprroo
%% ffoorr ii iinn ffoooo..**;; mmvv $$ii $$ii::ss//ffoooo//bbaarr//
%% llss
bbaarr..cc    bbaarr..hh    bbaarr..oo    bbaarr..pprroo

There is yet another syntax to  modify  substituted  parame-
ters.   You  can  add certain modifiers in parentheses after
the opening brace like:

$${{((_m_o_d_i_f_i_e_r_s))_p_a_r_a_m_e_t_e_r}}

For example, oo sorts the words resulting from the expansion:

%% eecchhoo $${{ppaatthh}}
//uussrr//bbiinn //uussrr//bbiinn//XX1111 //eettcc
%% eecchhoo $${{((oo))ppaatthh}}
//eettcc //uussrr//bbiinn //uussrr//bbiinn//XX1111

One  possible  source  of confusion is the fact that in zzsshh,
the result of  parameter  substitution  is  _n_o_t  split  into
words.  Thus, this will not work:

%% ssrrccss==''gglloobb..cc eexxeecc..cc iinniitt..cc''
%% llss $$ssrrccss
gglloobb..cc eexxeecc..cc iinniitt..cc nnoott ffoouunndd

This  is considered a feature, not a bug.  If splitting were
done by default, as it is in most  other  shells,  functions
like this would not work properly:

$$ llll (()) {{ llss --FF $$** }}
$$ llll ''ffuuuu bbaarr''
ffuuuu nnoott ffoouunndd
bbaarr nnoott ffoouunndd

%% llll ''ffuuuu bbaarr''
ffuuuu bbaarr nnoott ffoouunndd










                            -40-


Of  course,  a  hackish  workaround  is available in sh (and
zzsshh):

%% sseettoopptt sshhwwoorrddsspplliitt
%% llll (()) {{ llss --FF ""$$@@"" }}
%% llll ''ffuuuu bbaarr''
ffuuuu bbaarr nnoott ffoouunndd

If you like the sh behaviour, zzsshh can accomodate you:

%% llss $${{==ssrrccss}}
eexxeecc..cc  gglloobb..cc  iinniitt..cc
%% sseettoopptt sshhwwoorrddsspplliitt
%% llss $$ssrrccss
eexxeecc..cc  gglloobb..cc  iinniitt..cc

Another way to get the $$ssrrccss trick to  work  is  to  use  an
array:

%% uunnsseett ssrrccss
%% ssrrccss==(( gglloobb..cc eexxeecc..cc iinniitt..cc ))
%% llss $$ssrrccss
eexxeecc..cc  gglloobb..cc  iinniitt..cc

or an alias:

%% aalliiaass --gg SSRRCCSS==''eexxeecc..cc gglloobb..cc iinniitt..cc''
%% llss SSRRCCSS
eexxeecc..cc  gglloobb..cc  iinniitt..cc

Another  option  that  modifies parameter expansion is _R_C_E_X_-
_P_A_N_D_P_A_R_A_M:

%% eecchhoo ffoooo//$$ssrrccss
ffoooo//gglloobb..cc eexxeecc..cc iinniitt..cc
%% sseettoopptt rrcceexxppaannddppaarraamm
%% eecchhoo ffoooo//$$ssrrccss
ffoooo//gglloobb..cc ffoooo//eexxeecc..cc ffoooo//iinniitt..cc
%% eecchhoo ffoooo//$${{^^ssrrccss}}
ffoooo//gglloobb..cc ffoooo//eexxeecc..cc ffoooo//iinniitt..cc
%% eecchhoo ffoooo//$$^^ssrrccss
ffoooo//gglloobb..cc ffoooo//eexxeecc..cc ffoooo//iinniitt..cc


SShheellll PPaarraammeetteerrss

The  shell  has  many  predefined  parameters  that  may  be
accessed.  Here are some examples:

%% sslleeeepp 1100 &&
[[11]] 33882200
%% eecchhoo $$!!
33882200
%% sseett aa bb cc









                            -41-


%% eecchhoo $$##
33
%% eecchhoo $$AARRGGCC
33
%% (( eexxiitt 2200 )) ;; eecchhoo $$??
2200
%% ffaallssee;; eecchhoo $$ssttaattuuss
11

($$?? and $$ssttaattuuss are equivalent.)

%% eecchhoo $$HHOOSSTT $$HHOOSSTTTTYYPPEE
ddeennddrriittee ssuunn44
%% eecchhoo $$UUIIDD $$GGIIDD
770011 6600
%% ccdd //ttmmpp
%% ccdd //hhoommee
%% eecchhoo $$PPWWDD $$OOLLDDPPWWDD
//hhoommee //ttmmpp
%% llss $$OOLLDDPPWWDD//..ggeettwwdd
//ttmmpp//..ggeettwwdd

~~++ and ~~-- are short for $$PPWWDD and $$OOLLDDPPWWDD, respectively.

%% llss ~~--//..ggeettwwdd
//ttmmpp//..ggeettwwdd
%% llss --dd ~~++//lleeaarrnniinngg
//hhoommee//lleeaarrnniinngg
%% eecchhoo $$RRAANNDDOOMM
44888800
%% eecchhoo $$RRAANNDDOOMM
1111778855
%% eecchhoo $$RRAANNDDOOMM
22006622
%% eecchhoo $$TTTTYY
//ddeevv//ttttyypp44
%% eecchhoo $$VVEERRSSIIOONN
zzsshh vv22..0000..0033
%% eecchhoo $$UUSSEERRNNAAMMEE
ppff


The ccddppaatthh variable sets the search path for the ccdd command.
If you do not specify .. somewhere in the path, it is assumed
to be the first component.

%% ccddppaatthh==(( //uussrr ~~ ~~//zzsshh ))
%% llss //uussrr
55bbiinn         ddiicctt         llaanngg         nneett          ssccccss         ssyyss
55iinncclluuddee     eettcc          lleeccttoorr       nnsseerrvvee       sseerrvviicceess     ttmmpp
55lliibb         eexxppoorrtt       lliibb          ooeedd          sshhaarree        uuccbb
aaddmm          ggaammeess        llooccaall        oolldd          sskkeell         uuccbbiinncclluuddee
bbiinn          ggeeaacc         lloosstt++ffoouunndd   ooppeennwwiinn      ssppooooll        uuccbblliibb
bboooott         hhoossttss        mmaaccssyymmaa__441177  ppaatt          ssrrcc          xxppgg22bbiinn









                            -42-


ddeemmoo         iinncclluuddee      mmaann          pprriinncceettoonn    ssttaanndd        xxppgg22iinncclluuddee
ddiiaagg         kkvvmm          mmddeecc         ppuubb          sswwaapp         xxppgg22lliibb
%% ccdd ssppooooll
//uussrr//ssppooooll
%% ccdd bbiinn
//uussrr//bbiinn
%% ccdd ffuunncc
~~//ffuunncc
%% ccdd
%% ccdd ppuubb
%% ppwwdd
//uu//ppffaallssttaadd//ppuubb
%% llss --dd //uussrr//ppuubb
//uussrr//ppuubb

PPAATTHH  and ppaatthh both set the search path for commands.  These
two variables are equivalent, except that one  is  a  string
and  one  is an array.  If the user modifies PPAATTHH, the shell
changes ppaatthh as well, and vice versa.

%% PPAATTHH==//bbiinn:://uussrr//bbiinn:://ttmmpp::..
%% eecchhoo $$ppaatthh
//bbiinn //uussrr//bbiinn //ttmmpp ..
%% ppaatthh==(( //uussrr//bbiinn .. //uussrr//llooccaall//bbiinn //uussrr//uuccbb ))
%% eecchhoo $$PPAATTHH
//uussrr//bbiinn::..:://uussrr//llooccaall//bbiinn:://uussrr//uuccbb

The same is true of CCDDPPAATTHH and ccddppaatthh:

%% eecchhoo $$CCDDPPAATTHH
//uussrr:://uu//ppffaallssttaadd:://uu//ppffaallssttaadd//zzsshh
%% CCDDPPAATTHH==//uu//ssuubbbbaarraaoo:://uussrr//ssrrcc:://ttmmpp
%% eecchhoo $$ccddppaatthh
//uu//ssuubbbbaarraaoo //uussrr//ssrrcc //ttmmpp

In general, predefined parameters with names in  all  lower-
case are arrays; assignments to them take the form:

_n_a_m_e==(( _e_l_e_m ... ))

Predefined  parameters  with  names  in  all  uppercase  are
strings.  If there is both an array and a string version  of
the  same parameter, the string version is a colon-separated
list, like PPAATTHH.

HHIISSTTFFIILLEE is the name of the history file, where the  history
is saved when a shell exits.

%% zzsshh
pphhooeenniixx%% HHIISSTTFFIILLEE==//ttmmpp//hhiissttoorryy
pphhooeenniixx%% SSAAVVEEHHIISSTT==2200
pphhooeenniixx%% eecchhoo ffoooo
ffoooo
pphhooeenniixx%% ddaattee









                            -43-


FFrrii MMaayy 2244 0055::3399::3355 EEDDTT 11999911
pphhooeenniixx%% uuppttiimmee
  55::3399aamm  uupp 44 ddaayyss,, 2200::0022,,  4400 uusseerrss,,  llooaadd aavveerraaggee:: 22..3300,, 22..2200,, 22..0000
pphhooeenniixx%% eexxiitt
%% ccaatt //ttmmpp//hhiissttoorryy
HHIISSTTFFIILLEE==//ttmmpp//hhiissttoorryy
SSAAVVEEHHIISSTT==2200
eecchhoo ffoooo
ddaattee
uuppttiimmee
eexxiitt
%% HHIISSTTSSIIZZEE==33
%% hhiissttoorryy
   2288  rrmm //ttmmpp//hhiissttoorryy
   2299  HHIISSTTSSIIZZEE==33
   3300  hhiissttoorryy

If  you have several incantations of zzsshh running at the same
time, like when using the  X  window  system,  it  might  be
preferable  to  append  the  history of each shell to a file
when a shell exits instead of overwriting the  old  contents
of  the  file.   You  can  get this behaviour by setting the
_A_P_P_E_N_D_H_I_S_T_O_R_Y option.

In zzsshh, if you say

%% >>ffiillee

the command ccaatt is normally assumed:

%% >>ffiillee
ffoooo!!
^^DD
%% ccaatt ffiillee
ffoooo!!

Thus, you can view a file simply by typing:

%% <<ffiillee
ffoooo!!

However, this is not csh or sh compatible.  To correct this,
change  the  value of the parameter NNUULLLLCCMMDD, which is ccaatt by
default.

%% NNUULLLLCCMMDD==::
%% >>ffiillee
%% llss --ll ffiillee
--rrww--rr----rr----  11 ppffaallssttaadd        00 MMaayy 2244 0055::4411 ffiillee

If NNUULLLLCCMMDD is unset, the shell reports an error if  no  com-
mand is specified (like csh).

%% uunnsseett NNUULLLLCCMMDD









                            -44-


%% >>ffiillee
zzsshh:: rreeddiirreeccttiioonn wwiitthh nnoo ccoommmmaanndd

Actually,  RREEAADDNNUULLLLCCMMDD is used whenever you have a null com-
mand reading input from a single file.  Thus,  you  can  set
RREEAADDNNUULLLLCCMMDD  to  mmoorree or lleessss rather than ccaatt.  Also, if you
set NNUULLLLCCMMDD to :: for sh compatibility, you  can  still  read
files with << ffiillee if you leave RREEAADDNNUULLLLCCMMDD set to mmoorree.

PPrroommppttiinngg

The default prompt for zzsshh is:

pphhooeenniixx%% eecchhoo $$PPRROOMMPPTT
%%mm%%##

The  %%mm  stands  for the short form of the current hostname,
and the %%## stands for a %% or a ##, depending on  whether  the
shell  is  running  as root or not.  zzsshh supports many other
control sequences in the PPRROOMMPPTT variable.

%% PPRROOMMPPTT==''%%//>> ''
//uu//ppffaallssttaadd//eettcc//TTeeXX//zzsshh>>

%% PPRROOMMPPTT==''%%~~>> ''
~~//eettcc//TTeeXX//zzsshh>>

%% PPRROOMMPPTT==''%%hh %%~~>> ''
66 ~~//eettcc//TTeeXX//zzsshh>>

%%hh represents the number of current history event.

%% PPRROOMMPPTT==''%%hh %%~~ %%MM>> ''
1100 ~~//eettcc//TTeeXX//zzsshh aappppllee--gguunnkkiieess..ggnnuu..aaii..mmiitt..eedduu>>

%% PPRROOMMPPTT==''%%hh %%~~ %%mm>> ''
1111 ~~//eettcc//TTeeXX//zzsshh aappppllee--gguunnkkiieess>>

%% PPRROOMMPPTT==''%%hh %%tt>> ''
1122 66::1111aamm>>

%% PPRROOMMPPTT==''%%nn %%ww ttttyy%%ll>>''
ppffaallssttaadd FFrrii 2244 ttttyypp00>>

PPRROOMMPPTT22 is used in multiline commands, like for-loops.   The
%%__  escape sequence was made especially for this prompt.  It
is replaced by the kind of command that is being entered.

%% PPRROOMMPPTT22==''%%__>> ''
%% ffoorr ii iinn ffoooo bbaarr
ffoorr>>

%% eecchhoo ''hhii
qquuoottee>>









                            -45-


Also available is the RRPPRROOMMPPTT parameter.  If  this  is  set,
the shell puts a prompt on the _r_i_g_h_t side of the screen.

%% RRPPRROOMMPPTT==''%%tt''
%%                                                      66::1144aamm

%% RRPPRROOMMPPTT==''%%~~''
%%                                               ~~//eettcc//TTeeXX//zzsshh

%% PPRROOMMPPTT==''%%ll %%TT %%mm[[%%hh]] '' RRPPRROOMMPPTT=='' %%~~''
pp00 66::1155 pphhooeenniixx[[55]]                              ~~//eettcc//TTeeXX//zzsshh

These  special escape sequences can also be used with the --PP
option to pprriinntt:

%% pprriinntt --PP %%hh ttttyy%%ll
1155 ttttyypp11


The PPOOSSTTEEDDIITT parameter is printed whenever the editor exits.
This  can  be  useful  for termcap tricks.  To highlight the
prompt and command line while leaving command output unhigh-
lighted, try this:

%% PPOOSSTTEEDDIITT==``eecchhoottcc ssee``
%% PPRROOMMPPTT==''%%SS%%%% ''


LLooggiinn//llooggoouutt wwaattcchhiinngg

You can specify login or logout events to monitor by setting
the wwaattcchh variable.  Normally, this is done by specifying  a
list of usernames.

%% wwaattcchh==(( ppffaallssttaadd ssuubbbbaarraaoo ssuukktthhnnkkrr eeggssiirreerr ))

The  lloogg  command  reports all people logged in that you are
watching for.

%% lloogg
ppffaallssttaadd hhaass llooggggeedd oonn pp00 ffrroomm mmiicckkeeyy..
ppffaallssttaadd hhaass llooggggeedd oonn pp55 ffrroomm mmiicckkeeyy..
%% ...
ssuubbbbaarraaoo hhaass llooggggeedd oonn pp88 ffrroomm pphhooeenniixx..
%% ...
ssuubbbbaarraaoo hhaass llooggggeedd ooffff pp88 ffrroomm pphhooeenniixx..
%% ...
ssuukktthhnnkkrr hhaass llooggggeedd oonn pp88 ffrroomm ddeeww..
%% ...
ssuukktthhnnkkrr hhaass llooggggeedd ooffff pp88 ffrroomm ddeeww..

If you specify hostnames with an @@ prepended, the shell will
watch for all users logging in from the specified host.










                            -46-


%% wwaattcchh==(( @@mmiicckkeeyy @@pphhooeenniixx ))
%% lloogg
ddjjtthhoonnggss hhaass llooggggeedd oonn qq22 ffrroomm pphhooeenniixx..
ppffaallssttaadd hhaass llooggggeedd oonn pp00 ffrroomm mmiicckkeeyy..
ppffaallssttaadd hhaass llooggggeedd oonn pp55 ffrroomm mmiicckkeeyy..

If  you  give  a tty name with a %% prepended, the shell will
watch for all users logging in on that tty.

%% wwaattcchh==(( %%ttttyypp00 %%ccoonnssoollee ))
%% lloogg
rroooott hhaass llooggggeedd oonn ccoonnssoollee ffrroomm ..
ppffaallssttaadd hhaass llooggggeedd oonn pp00 ffrroomm mmiicckkeeyy..

The format of the reports may also be changed.

%% wwaattcchh==(( ppffaallssttaadd ggeetttteess eeppss ddjjtthhoonnggss jjccoorrrr bbddaavviiss ))
%% lloogg
jjccoorrrr hhaass llooggggeedd oonn ttff ffrroomm 112288..111122..117766..33::00..
jjccoorrrr hhaass llooggggeedd oonn rr00 ffrroomm 112288..111122..117766..33::00..
ggeetttteess hhaass llooggggeedd oonn pp44 ffrroomm yyoo::00..00..
ddjjtthhoonnggss hhaass llooggggeedd oonn ppee ffrroomm ggrruummppyy::00..00..
ddjjtthhoonnggss hhaass llooggggeedd oonn qq22 ffrroomm pphhooeenniixx..
bbddaavviiss hhaass llooggggeedd oonn qqdd ffrroomm BBRRUUNNOO..
eeppss hhaass llooggggeedd oonn pp33 ffrroomm ccssxx3300::00..00..
ppffaallssttaadd hhaass llooggggeedd oonn pp00 ffrroomm mmiicckkeeyy..
ppffaallssttaadd hhaass llooggggeedd oonn pp55 ffrroomm mmiicckkeeyy..
%% WWAATTCCHHFFMMTT==''%%nn oonn ttttyy%%ll ffrroomm %%MM''
%% lloogg
jjccoorrrr oonn ttttyyttff ffrroomm 112288..111122..117766..33::00..
jjccoorrrr oonn ttttyyrr00 ffrroomm 112288..111122..117766..33::00..
ggeetttteess oonn ttttyypp44 ffrroomm yyoo::00..00
ddjjtthhoonnggss oonn ttttyyppee ffrroomm ggrruummppyy::00..00
ddjjtthhoonnggss oonn ttttyyqq22 ffrroomm pphhooeenniixx..PPrriinncceettoo
bbddaavviiss oonn ttttyyqqdd ffrroomm BBRRUUNNOO..ppppppll..ggoovv
eeppss oonn ttttyypp33 ffrroomm ccssxx3300::00..00
ppffaallssttaadd oonn ttttyypp00 ffrroomm mmiicckkeeyy..PPrriinncceettoonn
ppffaallssttaadd oonn ttttyypp55 ffrroomm mmiicckkeeyy..PPrriinncceettoonn
%% WWAATTCCHHFFMMTT==''%%nn ffmm %%mm''
%% lloogg
jjccoorrrr ffmm 112288..111122..117766..33::00
jjccoorrrr ffmm 112288..111122..117766..33::00
ggeetttteess ffmm yyoo::00..00
ddjjtthhoonnggss ffmm ggrruummppyy::00..00
ddjjtthhoonnggss ffmm pphhooeenniixx
bbddaavviiss ffmm BBRRUUNNOO
eeppss ffmm ccssxx3300::00..00
ppffaallssttaadd ffmm mmiicckkeeyy
ppffaallssttaadd ffmm mmiicckkeeyy
%% WWAATTCCHHFFMMTT==''%%nn %%aa aatt %%tt %%ww..''
%% lloogg
jjccoorrrr llooggggeedd oonn aatt 33::1155ppmm MMoonn 2200..
jjccoorrrr llooggggeedd oonn aatt 33::1166ppmm WWeedd 2222..
ggeetttteess llooggggeedd oonn aatt 66::5544ppmm WWeedd 2222..









                            -47-


ddjjtthhoonnggss llooggggeedd oonn aatt 77::1199aamm TThhuu 2233..
ddjjtthhoonnggss llooggggeedd oonn aatt 77::2200aamm TThhuu 2233..
bbddaavviiss llooggggeedd oonn aatt 1122::4400ppmm TThhuu 2233..
eeppss llooggggeedd oonn aatt 44::1199ppmm TThhuu 2233..
ppffaallssttaadd llooggggeedd oonn aatt 33::3399aamm FFrrii 2244..
ppffaallssttaadd llooggggeedd oonn aatt 33::4422aamm FFrrii 2244..

If you have a ..ffrriieennddss file in your home directory, a conve-
nient  way  to  make zzsshh watch for all your friends is to do
this:

%% wwaattcchh==(( $$((<< ~~//..ffrriieennddss)) ))
%% eecchhoo $$wwaattcchh
ssuubbbbaarraaoo mmaarruucchhcckk rroooott ssuukktthhnnkkrr ...

If watch is set to aallll, then all users  logging  in  or  out
will be reported.

OOppttiioonnss

Some  options  have  already  been mentioned; here are a few
more:

Using the _A_U_T_O_C_D option, you can simply type the name  of  a
directory, and it will become the current directory.

%% ccdd //
%% sseettoopptt aauuttooccdd
%% bbiinn
%% ppwwdd
//bbiinn
%% ....//eettcc
%% ppwwdd
//eettcc

With  _C_D_A_B_L_E_V_A_R_S,  if  the  argument  to ccdd is the name of a
parameter whose value is a valid directory, it  will  become
the current directory.

%% sseettoopptt ccddaabblleevvaarrss
%% ffoooo==//ttmmpp
%% ccdd ffoooo
//ttmmpp

_C_O_R_R_E_C_T  turns  on spelling correction for commands, and the
_C_O_R_R_E_C_T_A_L_L option turns on spelling correction for all argu-
ments.

%% sseettoopptt ccoorrrreecctt
%% ssll
zzsshh:: ccoorrrreecctt ``ssll'' ttoo ``llss'' [[nnyyaaee]]?? yy
%% sseettoopptt ccoorrrreeccttaallll
%% llss xx..vv1111rr44
zzsshh:: ccoorrrreecctt ``xx..vv1111rr44'' ttoo ``XX..VV1111RR44'' [[nnyyaaee]]?? nn









                            -48-


//uussrr//pprriinnccttoonn//ssrrcc//xx..vv1111rr44 nnoott ffoouunndd
%% llss //eettcc//ppaasswwdd
zzsshh:: ccoorrrreecctt ttoo ``//eettcc//ppaasswwdd'' ttoo ``//eettcc//ppaasssswwdd'' [[nnyyaaee]]?? yy
//eettcc//ppaasssswwdd

If  you  press yy when the shell asks you if you want to cor-
rect a word, it will be corrected.  If you press nn, it  will
be  left alone.  Pressing aa aborts the command, and pressing
ee brings the line up for editing again, in  case  you  agree
the word is spelled wrong but you don't like the correction.

Normally, a quoted expression may contain a newline:

%% eecchhoo ''
>> ffoooo
>> ''

ffoooo

%%

With _C_S_H_J_U_N_K_I_E_Q_U_O_T_E_S set, this is illegal, as it is in  csh.

%% sseettoopptt ccsshhjjuunnkkiieeqquuootteess
%% llss ''ffoooo
zzsshh:: uunnmmaattcchheedd ''

_G_L_O_B_D_O_T_S  lets  files  beginning with a .. be matched without
explicitly specifying the dot.

%% llss --dd **xx**
MMaaiillbbooxxeess
%% sseettoopptt gglloobbddoottss
%% llss --dd **xx**
..eexxrrcc         ..ppnneewwsseexxppeerrtt  ..xxsseerrvveerrrrcc
..mmuusshheexxppeerrtt   ..xxiinniittrrcc      MMaaiillbbooxxeess

_H_I_S_T_I_G_N_O_R_E_D_U_P_S prevents the current line from being saved in
the  history  if it is the same as the previous one; _H_I_S_T_I_G_-
_N_O_R_E_S_P_A_C_E prevents the current line from being saved  if  it
begins with a space.

%% PPRROOMMPPTT==''%%hh>> ''
3399>> sseettoopptt hhiissttiiggnnoorreedduuppss
4400>> eecchhoo ffoooo
ffoooo
4411>> eecchhoo ffoooo
ffoooo
4411>> eecchhoo ffoooo
ffoooo
4411>> eecchhoo bbaarr
bbaarr
4422>> sseettoopptt hhiissttiiggnnoorreessppaaccee
4433>>  eecchhoo ffoooo









                            -49-


ffoooo
4433>>  eecchhoo ffuubbaarr
ffuubbaarr
4433>>  eecchhoo ffuubbaarr
ffuubbaarr

_I_G_N_O_R_E_B_R_A_C_E_S turns off csh-style brace expansion.

%% eecchhoo xx{{yy{{zz,,aa}},,{{bb,,cc}}dd}}ee
xxyyzzee xxyyaaee xxbbddee xxccddee
%% sseettoopptt iiggnnoorreebbrraacceess
%% eecchhoo xx{{yy{{zz,,aa}},,{{bb,,cc}}dd}}ee
xx{{yy{{zz,,aa}},,{{bb,,cc}}dd}}ee

_I_G_N_O_R_E_E_O_F forces the user to type eexxiitt or llooggoouutt, instead of
just pressing _^_D.

%% sseettoopptt iiggnnoorreeeeooff
%% ^^DD
zzsshh:: uussee ''eexxiitt'' ttoo eexxiitt..

_I_N_T_E_R_A_C_T_I_V_E_C_O_M_M_E_N_T_S turns on interactive comments;  comments
begin with a ##.

%% sseettoopptt iinntteerraaccttiivveeccoommmmeennttss
%% ddaattee ## tthhiiss iiss aa ccoommmmeenntt
FFrrii MMaayy 2244 0066::5544::1144 EEDDTT 11999911

_N_O_B_E_E_P makes sure the shell never beeps.

_N_O_C_L_O_B_B_E_R  prevents  you  from  accidentally  overwriting an
existing file.

%% sseettoopptt nnoocclloobbbbeerr
%% ccaatt //ddeevv//nnuullll >>~~//..zzsshhrrcc
zzsshh:: ffiillee eexxiissttss:: //uu//ppffaallssttaadd//..zzsshhrrcc

If you really do want to clobber a file, you can use the  >>!!
operator.   To  make  things  easier  in this case, the >> is
stored in the history list as a >>!!:

%% ccaatt //ddeevv//nnuullll >>!! ~~//..zzsshhrrcc
%% ccaatt //eettcc//mmoottdd >> ~~//..zzsshhrrcc
zzsshh:: ffiillee eexxiissttss:: //uu//ppffaallssttaadd//..zzsshhrrcc
%% !!!!
ccaatt //eettcc//mmoottdd >>!! ~~//..zzsshhrrcc
%% ...

_R_C_Q_U_O_T_E_S lets you use a more elegant  method  for  including
single quotes in a singly quoted string:

%% eecchhoo ''""ddoonn''\\''''tt ddoo tthhaatt..""''
""ddoonn''tt ddoo tthhaatt..""
%% eecchhoo ''""ddoonn''''tt ddoo tthhaatt..""''









                            -50-


""ddoonntt ddoo tthhaatt..""
%% sseettoopptt rrccqquuootteess
%% eecchhoo ''""ddoonn''''tt ddoo tthhaatt..""''
""ddoonn''tt ddoo tthhaatt..""

Finally,  _S_U_N_K_E_Y_B_O_A_R_D_H_A_C_K  wins  the award for the strangest
option.  If a line ends with ``, and there are an odd  number
of  them  on the line, the shell will ignore the trailing ``.
This is provided for  keyboards  whose  RETURN  key  is  too
small, and too close to the `` key.

%% sseettoopptt ssuunnkkeeyybbooaarrddhhaacckk
%% ddaattee``
FFrrii MMaayy 2244 0066::5555::3388 EEDDTT 11999911


CClloossiinngg CCoommmmeennttss

I  (Bas  de Bakker) would be happy to receive mail if anyone
has any tricks or ideas to add to this document, or if there
are  some  points that could be made clearer or covered more
thoroughly.  Please notify me of any errors  in  this  docu-
ment.








































                            -51-


                     TTaabbllee ooff CCoonntteennttss



Introduction . . . . . . . . . . . . . . . . . . . . . .   1

Filename Generation  . . . . . . . . . . . . . . . . . .   1

Startup Files  . . . . . . . . . . . . . . . . . . . . .   5

Shell Functions  . . . . . . . . . . . . . . . . . . . .   6

Directories  . . . . . . . . . . . . . . . . . . . . . .   9

Directory Stacks . . . . . . . . . . . . . . . . . . . .  11

Command/Process Substitution . . . . . . . . . . . . . .  14

Redirection  . . . . . . . . . . . . . . . . . . . . . .  17

Aliasing . . . . . . . . . . . . . . . . . . . . . . . .  17

History  . . . . . . . . . . . . . . . . . . . . . . . .  21

Command Line Editing . . . . . . . . . . . . . . . . . .  23

Completion . . . . . . . . . . . . . . . . . . . . . . .  27

Extended completion  . . . . . . . . . . . . . . . . . .  32

Bindings . . . . . . . . . . . . . . . . . . . . . . . .  35

Parameter Substitution . . . . . . . . . . . . . . . . .  36

Shell Parameters . . . . . . . . . . . . . . . . . . . .  40

Prompting  . . . . . . . . . . . . . . . . . . . . . . .  44

Login/logout watching  . . . . . . . . . . . . . . . . .  45

Options  . . . . . . . . . . . . . . . . . . . . . . . .  47

Closing Comments . . . . . . . . . . . . . . . . . . . .  50

















